'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3603
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
'
Namespace WebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BizLogic1SoapBinding", [Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class WorkFlowWSService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private connectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private disconnectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isSessionValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserAuthorizedProcessTemplateListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private completeWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private assignWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAvailableWorkItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAssignedWorkItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateVersionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessInstancePriorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private removeProcessTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isProcessTemplateExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProxyAssignedWorkItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProxyAvailableWorkItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSuspendedWorkItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserAuthorizedProcessTemplateNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateAppNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateNameFromProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateNameFromProcessIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateWorkStepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateFromIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateDataSlotsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessTemplateDataSlotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceDataSlotsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceDataSlotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceDataSlotFromPIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepInstanceDataSlotsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepInstanceDataSlotsFromPIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkItemDataSlotsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkItemDataSlotsFromWIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepTemplateDataSlotsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepTemplateDataSlotsFromPTIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessTemplateDataSlotValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessTemplateDataSlotsValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessInstanceDataSlotValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessInstanceDataSlotsValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setWorkItemDataSlotsValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setWorkItemDataSlotValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceFromIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setProcessInstanceDueDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkItemFromIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private assignWorkItemFromWIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private reAssignWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private reAssignWorkItemFromWIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private makeAvailableWorkItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private makeAvailableWorkItemFromWIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private completeWorkItemFromWIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getWorkStepInstanceFromPIIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProcessInstanceWorkStepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendWorkStepInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeWorkStepInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStartWorkStepTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WorkFlow.My.MySettings.Default.WorkFlow_WebReference_WorkFlowWSService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event connectCompleted As connectCompletedEventHandler
        
        '''<remarks/>
        Public Event disconnectCompleted As disconnectCompletedEventHandler
        
        '''<remarks/>
        Public Event getStatusCompleted As getStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateCompleted As getProcessTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event isSessionValidCompleted As isSessionValidCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserAuthorizedProcessTemplateListCompleted As getUserAuthorizedProcessTemplateListCompletedEventHandler
        
        '''<remarks/>
        Public Event completeWorkItemCompleted As completeWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceListCompleted As getProcessInstanceListCompletedEventHandler
        
        '''<remarks/>
        Public Event assignWorkItemCompleted As assignWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateIDCompleted As getProcessTemplateIDCompletedEventHandler
        
        '''<remarks/>
        Public Event createProcessInstanceCompleted As createProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepInstanceCompleted As getWorkStepInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepTemplateCompleted As getWorkStepTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event getAvailableWorkItemListCompleted As getAvailableWorkItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event getAssignedWorkItemListCompleted As getAssignedWorkItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceCompleted As getProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkItemCompleted As getWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateVersionsCompleted As getProcessTemplateVersionsCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessInstancePriorityCompleted As setProcessInstancePriorityCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateXMLCompleted As getProcessTemplateXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event removeProcessTemplateCompleted As removeProcessTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeProcessInstanceCompleted As resumeProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event suspendProcessInstanceCompleted As suspendProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event isProcessTemplateExistCompleted As isProcessTemplateExistCompletedEventHandler
        
        '''<remarks/>
        Public Event getProxyAssignedWorkItemListCompleted As getProxyAssignedWorkItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event getProxyAvailableWorkItemListCompleted As getProxyAvailableWorkItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event getSuspendedWorkItemListCompleted As getSuspendedWorkItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserAuthorizedProcessTemplateNamesCompleted As getUserAuthorizedProcessTemplateNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateAppNameCompleted As getProcessTemplateAppNameCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateNameFromProcessInstanceCompleted As getProcessTemplateNameFromProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateNameFromProcessIDCompleted As getProcessTemplateNameFromProcessIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateWorkStepsCompleted As getProcessTemplateWorkStepsCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateFromIDCompleted As getProcessTemplateFromIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateDataSlotsCompleted As getProcessTemplateDataSlotsCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessTemplateDataSlotCompleted As getProcessTemplateDataSlotCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceDataSlotsCompleted As getProcessInstanceDataSlotsCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceDataSlotCompleted As getProcessInstanceDataSlotCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceDataSlotFromPIIDCompleted As getProcessInstanceDataSlotFromPIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepInstanceDataSlotsCompleted As getWorkStepInstanceDataSlotsCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepInstanceDataSlotsFromPIIDCompleted As getWorkStepInstanceDataSlotsFromPIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkItemDataSlotsCompleted As getWorkItemDataSlotsCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkItemDataSlotsFromWIIDCompleted As getWorkItemDataSlotsFromWIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepTemplateDataSlotsCompleted As getWorkStepTemplateDataSlotsCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepTemplateDataSlotsFromPTIDCompleted As getWorkStepTemplateDataSlotsFromPTIDCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessTemplateDataSlotValueCompleted As setProcessTemplateDataSlotValueCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessTemplateDataSlotsValueCompleted As setProcessTemplateDataSlotsValueCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessInstanceDataSlotValueCompleted As setProcessInstanceDataSlotValueCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessInstanceDataSlotsValueCompleted As setProcessInstanceDataSlotsValueCompletedEventHandler
        
        '''<remarks/>
        Public Event setWorkItemDataSlotsValueCompleted As setWorkItemDataSlotsValueCompletedEventHandler
        
        '''<remarks/>
        Public Event setWorkItemDataSlotValueCompleted As setWorkItemDataSlotValueCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceFromIDCompleted As getProcessInstanceFromIDCompletedEventHandler
        
        '''<remarks/>
        Public Event setProcessInstanceDueDateCompleted As setProcessInstanceDueDateCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkItemFromIDCompleted As getWorkItemFromIDCompletedEventHandler
        
        '''<remarks/>
        Public Event suspendWorkItemCompleted As suspendWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeWorkItemCompleted As resumeWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event assignWorkItemFromWIIDCompleted As assignWorkItemFromWIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event reAssignWorkItemCompleted As reAssignWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event reAssignWorkItemFromWIIDCompleted As reAssignWorkItemFromWIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event makeAvailableWorkItemCompleted As makeAvailableWorkItemCompletedEventHandler
        
        '''<remarks/>
        Public Event makeAvailableWorkItemFromWIIDCompleted As makeAvailableWorkItemFromWIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event completeWorkItemFromWIIDCompleted As completeWorkItemFromWIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getWorkStepInstanceFromPIIDCompleted As getWorkStepInstanceFromPIIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getProcessInstanceWorkStepsCompleted As getProcessInstanceWorkStepsCompletedEventHandler
        
        '''<remarks/>
        Public Event suspendWorkStepInstanceCompleted As suspendWorkStepInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeWorkStepInstanceCompleted As resumeWorkStepInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getStartWorkStepTemplateCompleted As getStartWorkStepTemplateCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function connect(ByVal userId As String, ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute("connectReturn")> String
            Dim results() As Object = Me.Invoke("connect", New Object() {userId, password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub connectAsync(ByVal userId As String, ByVal password As String)
            Me.connectAsync(userId, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub connectAsync(ByVal userId As String, ByVal password As String, ByVal userState As Object)
            If (Me.connectOperationCompleted Is Nothing) Then
                Me.connectOperationCompleted = AddressOf Me.OnconnectOperationCompleted
            End If
            Me.InvokeAsync("connect", New Object() {userId, password}, Me.connectOperationCompleted, userState)
        End Sub
        
        Private Sub OnconnectOperationCompleted(ByVal arg As Object)
            If (Not (Me.connectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent connectCompleted(Me, New connectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub disconnect(ByVal session As String)
            Me.Invoke("disconnect", New Object() {session})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub disconnectAsync(ByVal session As String)
            Me.disconnectAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub disconnectAsync(ByVal session As String, ByVal userState As Object)
            If (Me.disconnectOperationCompleted Is Nothing) Then
                Me.disconnectOperationCompleted = AddressOf Me.OndisconnectOperationCompleted
            End If
            Me.InvokeAsync("disconnect", New Object() {session}, Me.disconnectOperationCompleted, userState)
        End Sub
        
        Private Sub OndisconnectOperationCompleted(ByVal arg As Object)
            If (Not (Me.disconnectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent disconnectCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStatus() As <System.Xml.Serialization.XmlElementAttribute("getStatusReturn")> String
            Dim results() As Object = Me.Invoke("getStatus", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStatusAsync()
            Me.getStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStatusAsync(ByVal userState As Object)
            If (Me.getStatusOperationCompleted Is Nothing) Then
                Me.getStatusOperationCompleted = AddressOf Me.OngetStatusOperationCompleted
            End If
            Me.InvokeAsync("getStatus", New Object(-1) {}, Me.getStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStatusCompleted(Me, New getStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplate(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateReturn")> ProcessTemplate
            Dim results() As Object = Me.Invoke("getProcessTemplate", New Object() {session, ptName})
            Return CType(results(0),ProcessTemplate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateOperationCompleted Is Nothing) Then
                Me.getProcessTemplateOperationCompleted = AddressOf Me.OngetProcessTemplateOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplate", New Object() {session, ptName}, Me.getProcessTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateCompleted(Me, New getProcessTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isSessionValid(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("isSessionValidReturn")> Boolean
            Dim results() As Object = Me.Invoke("isSessionValid", New Object() {session})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isSessionValidAsync(ByVal session As String)
            Me.isSessionValidAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isSessionValidAsync(ByVal session As String, ByVal userState As Object)
            If (Me.isSessionValidOperationCompleted Is Nothing) Then
                Me.isSessionValidOperationCompleted = AddressOf Me.OnisSessionValidOperationCompleted
            End If
            Me.InvokeAsync("isSessionValid", New Object() {session}, Me.isSessionValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnisSessionValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.isSessionValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isSessionValidCompleted(Me, New isSessionValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserAuthorizedProcessTemplateList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getUserAuthorizedProcessTemplateListReturn")> ProcessTemplate()
            Dim results() As Object = Me.Invoke("getUserAuthorizedProcessTemplateList", New Object() {session})
            Return CType(results(0),ProcessTemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserAuthorizedProcessTemplateListAsync(ByVal session As String)
            Me.getUserAuthorizedProcessTemplateListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserAuthorizedProcessTemplateListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getUserAuthorizedProcessTemplateListOperationCompleted Is Nothing) Then
                Me.getUserAuthorizedProcessTemplateListOperationCompleted = AddressOf Me.OngetUserAuthorizedProcessTemplateListOperationCompleted
            End If
            Me.InvokeAsync("getUserAuthorizedProcessTemplateList", New Object() {session}, Me.getUserAuthorizedProcessTemplateListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserAuthorizedProcessTemplateListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserAuthorizedProcessTemplateListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserAuthorizedProcessTemplateListCompleted(Me, New getUserAuthorizedProcessTemplateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub completeWorkItem(ByVal session As String, ByVal wiName As String, <System.Xml.Serialization.XmlElementAttribute("dsi")> ByVal dsi() As DataSlotinstance)
            Me.Invoke("completeWorkItem", New Object() {session, wiName, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub completeWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal dsi() As DataSlotinstance)
            Me.completeWorkItemAsync(session, wiName, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub completeWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal dsi() As DataSlotinstance, ByVal userState As Object)
            If (Me.completeWorkItemOperationCompleted Is Nothing) Then
                Me.completeWorkItemOperationCompleted = AddressOf Me.OncompleteWorkItemOperationCompleted
            End If
            Me.InvokeAsync("completeWorkItem", New Object() {session, wiName, dsi}, Me.completeWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OncompleteWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.completeWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent completeWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceListReturn")> ProcessInstance()
            Dim results() As Object = Me.Invoke("getProcessInstanceList", New Object() {session})
            Return CType(results(0),ProcessInstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceListAsync(ByVal session As String)
            Me.getProcessInstanceListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getProcessInstanceListOperationCompleted Is Nothing) Then
                Me.getProcessInstanceListOperationCompleted = AddressOf Me.OngetProcessInstanceListOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceList", New Object() {session}, Me.getProcessInstanceListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceListCompleted(Me, New getProcessInstanceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub assignWorkItem(ByVal session As String, ByVal wiName As String, ByVal performer As String)
            Me.Invoke("assignWorkItem", New Object() {session, wiName, performer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performer As String)
            Me.assignWorkItemAsync(session, wiName, performer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performer As String, ByVal userState As Object)
            If (Me.assignWorkItemOperationCompleted Is Nothing) Then
                Me.assignWorkItemOperationCompleted = AddressOf Me.OnassignWorkItemOperationCompleted
            End If
            Me.InvokeAsync("assignWorkItem", New Object() {session, wiName, performer}, Me.assignWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnassignWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.assignWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent assignWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateID(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateIDReturn")> Long
            Dim results() As Object = Me.Invoke("getProcessTemplateID", New Object() {session, ptName})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateIDAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateIDAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateIDAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateIDOperationCompleted Is Nothing) Then
                Me.getProcessTemplateIDOperationCompleted = AddressOf Me.OngetProcessTemplateIDOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateID", New Object() {session, ptName}, Me.getProcessTemplateIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateIDCompleted(Me, New getProcessTemplateIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createProcessInstance(ByVal session As String, ByVal ptName As String, ByVal piNamePrefix As String, ByVal priority As String, <System.Xml.Serialization.XmlElementAttribute("dst")> ByVal dst() As DataSlotTemplate) As <System.Xml.Serialization.XmlElementAttribute("createProcessInstanceReturn")> ProcessInstance
            Dim results() As Object = Me.Invoke("createProcessInstance", New Object() {session, ptName, piNamePrefix, priority, dst})
            Return CType(results(0),ProcessInstance)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createProcessInstanceAsync(ByVal session As String, ByVal ptName As String, ByVal piNamePrefix As String, ByVal priority As String, ByVal dst() As DataSlotTemplate)
            Me.createProcessInstanceAsync(session, ptName, piNamePrefix, priority, dst, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createProcessInstanceAsync(ByVal session As String, ByVal ptName As String, ByVal piNamePrefix As String, ByVal priority As String, ByVal dst() As DataSlotTemplate, ByVal userState As Object)
            If (Me.createProcessInstanceOperationCompleted Is Nothing) Then
                Me.createProcessInstanceOperationCompleted = AddressOf Me.OncreateProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("createProcessInstance", New Object() {session, ptName, piNamePrefix, priority, dst}, Me.createProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.createProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createProcessInstanceCompleted(Me, New createProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepInstance(ByVal session As String, ByVal piName As String, ByVal wsName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepInstanceReturn")> WorkStepInstance
            Dim results() As Object = Me.Invoke("getWorkStepInstance", New Object() {session, piName, wsName})
            Return CType(results(0),WorkStepInstance)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String)
            Me.getWorkStepInstanceAsync(session, piName, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String, ByVal userState As Object)
            If (Me.getWorkStepInstanceOperationCompleted Is Nothing) Then
                Me.getWorkStepInstanceOperationCompleted = AddressOf Me.OngetWorkStepInstanceOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepInstance", New Object() {session, piName, wsName}, Me.getWorkStepInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepInstanceCompleted(Me, New getWorkStepInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepTemplate(ByVal session As String, ByVal ptName As String, ByVal wsName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepTemplateReturn")> WorkSteptemplate
            Dim results() As Object = Me.Invoke("getWorkStepTemplate", New Object() {session, ptName, wsName})
            Return CType(results(0),WorkSteptemplate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateAsync(ByVal session As String, ByVal ptName As String, ByVal wsName As String)
            Me.getWorkStepTemplateAsync(session, ptName, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateAsync(ByVal session As String, ByVal ptName As String, ByVal wsName As String, ByVal userState As Object)
            If (Me.getWorkStepTemplateOperationCompleted Is Nothing) Then
                Me.getWorkStepTemplateOperationCompleted = AddressOf Me.OngetWorkStepTemplateOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepTemplate", New Object() {session, ptName, wsName}, Me.getWorkStepTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepTemplateCompleted(Me, New getWorkStepTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAvailableWorkItemList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getAvailableWorkItemListReturn")> WorkItem()
            Dim results() As Object = Me.Invoke("getAvailableWorkItemList", New Object() {session})
            Return CType(results(0),WorkItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAvailableWorkItemListAsync(ByVal session As String)
            Me.getAvailableWorkItemListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAvailableWorkItemListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getAvailableWorkItemListOperationCompleted Is Nothing) Then
                Me.getAvailableWorkItemListOperationCompleted = AddressOf Me.OngetAvailableWorkItemListOperationCompleted
            End If
            Me.InvokeAsync("getAvailableWorkItemList", New Object() {session}, Me.getAvailableWorkItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAvailableWorkItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAvailableWorkItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAvailableWorkItemListCompleted(Me, New getAvailableWorkItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAssignedWorkItemList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getAssignedWorkItemListReturn")> WorkItem()
            Dim results() As Object = Me.Invoke("getAssignedWorkItemList", New Object() {session})
            Return CType(results(0),WorkItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAssignedWorkItemListAsync(ByVal session As String)
            Me.getAssignedWorkItemListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAssignedWorkItemListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getAssignedWorkItemListOperationCompleted Is Nothing) Then
                Me.getAssignedWorkItemListOperationCompleted = AddressOf Me.OngetAssignedWorkItemListOperationCompleted
            End If
            Me.InvokeAsync("getAssignedWorkItemList", New Object() {session}, Me.getAssignedWorkItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAssignedWorkItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAssignedWorkItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAssignedWorkItemListCompleted(Me, New getAssignedWorkItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstance(ByVal session As String, ByVal piName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceReturn")> ProcessInstance
            Dim results() As Object = Me.Invoke("getProcessInstance", New Object() {session, piName})
            Return CType(results(0),ProcessInstance)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceAsync(ByVal session As String, ByVal piName As String)
            Me.getProcessInstanceAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.getProcessInstanceOperationCompleted Is Nothing) Then
                Me.getProcessInstanceOperationCompleted = AddressOf Me.OngetProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstance", New Object() {session, piName}, Me.getProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceCompleted(Me, New getProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkItem(ByVal session As String, ByVal wiName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkItemReturn")> WorkItem
            Dim results() As Object = Me.Invoke("getWorkItem", New Object() {session, wiName})
            Return CType(results(0),WorkItem)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkItemAsync(ByVal session As String, ByVal wiName As String)
            Me.getWorkItemAsync(session, wiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal userState As Object)
            If (Me.getWorkItemOperationCompleted Is Nothing) Then
                Me.getWorkItemOperationCompleted = AddressOf Me.OngetWorkItemOperationCompleted
            End If
            Me.InvokeAsync("getWorkItem", New Object() {session, wiName}, Me.getWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkItemCompleted(Me, New getWorkItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateVersions(ByVal session As String, ByVal appName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateVersionsReturn")> String()
            Dim results() As Object = Me.Invoke("getProcessTemplateVersions", New Object() {session, appName})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateVersionsAsync(ByVal session As String, ByVal appName As String)
            Me.getProcessTemplateVersionsAsync(session, appName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateVersionsAsync(ByVal session As String, ByVal appName As String, ByVal userState As Object)
            If (Me.getProcessTemplateVersionsOperationCompleted Is Nothing) Then
                Me.getProcessTemplateVersionsOperationCompleted = AddressOf Me.OngetProcessTemplateVersionsOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateVersions", New Object() {session, appName}, Me.getProcessTemplateVersionsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateVersionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateVersionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateVersionsCompleted(Me, New getProcessTemplateVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessInstancePriority(ByVal session As String, ByVal piName As String, ByVal priority As String)
            Me.Invoke("setProcessInstancePriority", New Object() {session, piName, priority})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstancePriorityAsync(ByVal session As String, ByVal piName As String, ByVal priority As String)
            Me.setProcessInstancePriorityAsync(session, piName, priority, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstancePriorityAsync(ByVal session As String, ByVal piName As String, ByVal priority As String, ByVal userState As Object)
            If (Me.setProcessInstancePriorityOperationCompleted Is Nothing) Then
                Me.setProcessInstancePriorityOperationCompleted = AddressOf Me.OnsetProcessInstancePriorityOperationCompleted
            End If
            Me.InvokeAsync("setProcessInstancePriority", New Object() {session, piName, priority}, Me.setProcessInstancePriorityOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessInstancePriorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessInstancePriorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessInstancePriorityCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateXML(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateXMLReturn")> String
            Dim results() As Object = Me.Invoke("getProcessTemplateXML", New Object() {session, ptName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateXMLAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateXMLAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateXMLAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateXMLOperationCompleted Is Nothing) Then
                Me.getProcessTemplateXMLOperationCompleted = AddressOf Me.OngetProcessTemplateXMLOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateXML", New Object() {session, ptName}, Me.getProcessTemplateXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateXMLCompleted(Me, New getProcessTemplateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub removeProcessTemplate(ByVal session As String, ByVal ptName As String)
            Me.Invoke("removeProcessTemplate", New Object() {session, ptName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub removeProcessTemplateAsync(ByVal session As String, ByVal ptName As String)
            Me.removeProcessTemplateAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub removeProcessTemplateAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.removeProcessTemplateOperationCompleted Is Nothing) Then
                Me.removeProcessTemplateOperationCompleted = AddressOf Me.OnremoveProcessTemplateOperationCompleted
            End If
            Me.InvokeAsync("removeProcessTemplate", New Object() {session, ptName}, Me.removeProcessTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnremoveProcessTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.removeProcessTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent removeProcessTemplateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub resumeProcessInstance(ByVal session As String, ByVal piName As String)
            Me.Invoke("resumeProcessInstance", New Object() {session, piName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeProcessInstanceAsync(ByVal session As String, ByVal piName As String)
            Me.resumeProcessInstanceAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeProcessInstanceAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.resumeProcessInstanceOperationCompleted Is Nothing) Then
                Me.resumeProcessInstanceOperationCompleted = AddressOf Me.OnresumeProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("resumeProcessInstance", New Object() {session, piName}, Me.resumeProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeProcessInstanceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub suspendProcessInstance(ByVal session As String, ByVal piName As String)
            Me.Invoke("suspendProcessInstance", New Object() {session, piName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendProcessInstanceAsync(ByVal session As String, ByVal piName As String)
            Me.suspendProcessInstanceAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendProcessInstanceAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.suspendProcessInstanceOperationCompleted Is Nothing) Then
                Me.suspendProcessInstanceOperationCompleted = AddressOf Me.OnsuspendProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("suspendProcessInstance", New Object() {session, piName}, Me.suspendProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendProcessInstanceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isProcessTemplateExist(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("isProcessTemplateExistReturn")> Boolean
            Dim results() As Object = Me.Invoke("isProcessTemplateExist", New Object() {session, ptName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isProcessTemplateExistAsync(ByVal session As String, ByVal ptName As String)
            Me.isProcessTemplateExistAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isProcessTemplateExistAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.isProcessTemplateExistOperationCompleted Is Nothing) Then
                Me.isProcessTemplateExistOperationCompleted = AddressOf Me.OnisProcessTemplateExistOperationCompleted
            End If
            Me.InvokeAsync("isProcessTemplateExist", New Object() {session, ptName}, Me.isProcessTemplateExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnisProcessTemplateExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.isProcessTemplateExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isProcessTemplateExistCompleted(Me, New isProcessTemplateExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProxyAssignedWorkItemList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getProxyAssignedWorkItemListReturn")> WorkItem()
            Dim results() As Object = Me.Invoke("getProxyAssignedWorkItemList", New Object() {session})
            Return CType(results(0),WorkItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProxyAssignedWorkItemListAsync(ByVal session As String)
            Me.getProxyAssignedWorkItemListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProxyAssignedWorkItemListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getProxyAssignedWorkItemListOperationCompleted Is Nothing) Then
                Me.getProxyAssignedWorkItemListOperationCompleted = AddressOf Me.OngetProxyAssignedWorkItemListOperationCompleted
            End If
            Me.InvokeAsync("getProxyAssignedWorkItemList", New Object() {session}, Me.getProxyAssignedWorkItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProxyAssignedWorkItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProxyAssignedWorkItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProxyAssignedWorkItemListCompleted(Me, New getProxyAssignedWorkItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProxyAvailableWorkItemList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getProxyAvailableWorkItemListReturn")> WorkItem()
            Dim results() As Object = Me.Invoke("getProxyAvailableWorkItemList", New Object() {session})
            Return CType(results(0),WorkItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProxyAvailableWorkItemListAsync(ByVal session As String)
            Me.getProxyAvailableWorkItemListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProxyAvailableWorkItemListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getProxyAvailableWorkItemListOperationCompleted Is Nothing) Then
                Me.getProxyAvailableWorkItemListOperationCompleted = AddressOf Me.OngetProxyAvailableWorkItemListOperationCompleted
            End If
            Me.InvokeAsync("getProxyAvailableWorkItemList", New Object() {session}, Me.getProxyAvailableWorkItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProxyAvailableWorkItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProxyAvailableWorkItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProxyAvailableWorkItemListCompleted(Me, New getProxyAvailableWorkItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSuspendedWorkItemList(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getSuspendedWorkItemListReturn")> WorkItem()
            Dim results() As Object = Me.Invoke("getSuspendedWorkItemList", New Object() {session})
            Return CType(results(0),WorkItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSuspendedWorkItemListAsync(ByVal session As String)
            Me.getSuspendedWorkItemListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSuspendedWorkItemListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getSuspendedWorkItemListOperationCompleted Is Nothing) Then
                Me.getSuspendedWorkItemListOperationCompleted = AddressOf Me.OngetSuspendedWorkItemListOperationCompleted
            End If
            Me.InvokeAsync("getSuspendedWorkItemList", New Object() {session}, Me.getSuspendedWorkItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSuspendedWorkItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSuspendedWorkItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSuspendedWorkItemListCompleted(Me, New getSuspendedWorkItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserAuthorizedProcessTemplateNames(ByVal session As String) As <System.Xml.Serialization.XmlElementAttribute("getUserAuthorizedProcessTemplateNamesReturn")> String()
            Dim results() As Object = Me.Invoke("getUserAuthorizedProcessTemplateNames", New Object() {session})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserAuthorizedProcessTemplateNamesAsync(ByVal session As String)
            Me.getUserAuthorizedProcessTemplateNamesAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserAuthorizedProcessTemplateNamesAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getUserAuthorizedProcessTemplateNamesOperationCompleted Is Nothing) Then
                Me.getUserAuthorizedProcessTemplateNamesOperationCompleted = AddressOf Me.OngetUserAuthorizedProcessTemplateNamesOperationCompleted
            End If
            Me.InvokeAsync("getUserAuthorizedProcessTemplateNames", New Object() {session}, Me.getUserAuthorizedProcessTemplateNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserAuthorizedProcessTemplateNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserAuthorizedProcessTemplateNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserAuthorizedProcessTemplateNamesCompleted(Me, New getUserAuthorizedProcessTemplateNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateAppName(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateAppNameReturn")> String
            Dim results() As Object = Me.Invoke("getProcessTemplateAppName", New Object() {session, ptName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateAppNameAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateAppNameAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateAppNameAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateAppNameOperationCompleted Is Nothing) Then
                Me.getProcessTemplateAppNameOperationCompleted = AddressOf Me.OngetProcessTemplateAppNameOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateAppName", New Object() {session, ptName}, Me.getProcessTemplateAppNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateAppNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateAppNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateAppNameCompleted(Me, New getProcessTemplateAppNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateNameFromProcessInstance(ByVal session As String, ByVal piName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateNameFromProcessInstanceReturn")> String
            Dim results() As Object = Me.Invoke("getProcessTemplateNameFromProcessInstance", New Object() {session, piName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateNameFromProcessInstanceAsync(ByVal session As String, ByVal piName As String)
            Me.getProcessTemplateNameFromProcessInstanceAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateNameFromProcessInstanceAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.getProcessTemplateNameFromProcessInstanceOperationCompleted Is Nothing) Then
                Me.getProcessTemplateNameFromProcessInstanceOperationCompleted = AddressOf Me.OngetProcessTemplateNameFromProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateNameFromProcessInstance", New Object() {session, piName}, Me.getProcessTemplateNameFromProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateNameFromProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateNameFromProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateNameFromProcessInstanceCompleted(Me, New getProcessTemplateNameFromProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateNameFromProcessID(ByVal session As String, ByVal ptID As Long) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateNameFromProcessIDReturn")> String
            Dim results() As Object = Me.Invoke("getProcessTemplateNameFromProcessID", New Object() {session, ptID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateNameFromProcessIDAsync(ByVal session As String, ByVal ptID As Long)
            Me.getProcessTemplateNameFromProcessIDAsync(session, ptID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateNameFromProcessIDAsync(ByVal session As String, ByVal ptID As Long, ByVal userState As Object)
            If (Me.getProcessTemplateNameFromProcessIDOperationCompleted Is Nothing) Then
                Me.getProcessTemplateNameFromProcessIDOperationCompleted = AddressOf Me.OngetProcessTemplateNameFromProcessIDOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateNameFromProcessID", New Object() {session, ptID}, Me.getProcessTemplateNameFromProcessIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateNameFromProcessIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateNameFromProcessIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateNameFromProcessIDCompleted(Me, New getProcessTemplateNameFromProcessIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateWorkSteps(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateWorkStepsReturn")> WorkSteptemplate()
            Dim results() As Object = Me.Invoke("getProcessTemplateWorkSteps", New Object() {session, ptName})
            Return CType(results(0),WorkSteptemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateWorkStepsAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateWorkStepsAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateWorkStepsAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateWorkStepsOperationCompleted Is Nothing) Then
                Me.getProcessTemplateWorkStepsOperationCompleted = AddressOf Me.OngetProcessTemplateWorkStepsOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateWorkSteps", New Object() {session, ptName}, Me.getProcessTemplateWorkStepsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateWorkStepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateWorkStepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateWorkStepsCompleted(Me, New getProcessTemplateWorkStepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateFromID(ByVal session As String, ByVal ptid As Long) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateFromIDReturn")> ProcessTemplate
            Dim results() As Object = Me.Invoke("getProcessTemplateFromID", New Object() {session, ptid})
            Return CType(results(0),ProcessTemplate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateFromIDAsync(ByVal session As String, ByVal ptid As Long)
            Me.getProcessTemplateFromIDAsync(session, ptid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateFromIDAsync(ByVal session As String, ByVal ptid As Long, ByVal userState As Object)
            If (Me.getProcessTemplateFromIDOperationCompleted Is Nothing) Then
                Me.getProcessTemplateFromIDOperationCompleted = AddressOf Me.OngetProcessTemplateFromIDOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateFromID", New Object() {session, ptid}, Me.getProcessTemplateFromIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateFromIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateFromIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateFromIDCompleted(Me, New getProcessTemplateFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateDataSlots(ByVal session As String, ByVal ptName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateDataSlotsReturn")> DataSlotTemplate()
            Dim results() As Object = Me.Invoke("getProcessTemplateDataSlots", New Object() {session, ptName})
            Return CType(results(0),DataSlotTemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateDataSlotsAsync(ByVal session As String, ByVal ptName As String)
            Me.getProcessTemplateDataSlotsAsync(session, ptName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateDataSlotsAsync(ByVal session As String, ByVal ptName As String, ByVal userState As Object)
            If (Me.getProcessTemplateDataSlotsOperationCompleted Is Nothing) Then
                Me.getProcessTemplateDataSlotsOperationCompleted = AddressOf Me.OngetProcessTemplateDataSlotsOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateDataSlots", New Object() {session, ptName}, Me.getProcessTemplateDataSlotsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateDataSlotsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateDataSlotsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateDataSlotsCompleted(Me, New getProcessTemplateDataSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessTemplateDataSlot(ByVal session As String, ByVal ptName As String, <System.Xml.Serialization.XmlElementAttribute("dsName")> ByVal dsName() As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessTemplateDataSlotReturn")> DataSlotTemplate()
            Dim results() As Object = Me.Invoke("getProcessTemplateDataSlot", New Object() {session, ptName, dsName})
            Return CType(results(0),DataSlotTemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateDataSlotAsync(ByVal session As String, ByVal ptName As String, ByVal dsName() As String)
            Me.getProcessTemplateDataSlotAsync(session, ptName, dsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessTemplateDataSlotAsync(ByVal session As String, ByVal ptName As String, ByVal dsName() As String, ByVal userState As Object)
            If (Me.getProcessTemplateDataSlotOperationCompleted Is Nothing) Then
                Me.getProcessTemplateDataSlotOperationCompleted = AddressOf Me.OngetProcessTemplateDataSlotOperationCompleted
            End If
            Me.InvokeAsync("getProcessTemplateDataSlot", New Object() {session, ptName, dsName}, Me.getProcessTemplateDataSlotOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessTemplateDataSlotOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessTemplateDataSlotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessTemplateDataSlotCompleted(Me, New getProcessTemplateDataSlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceDataSlots(ByVal session As String, ByVal piName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceDataSlotsReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getProcessInstanceDataSlots", New Object() {session, piName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotsAsync(ByVal session As String, ByVal piName As String)
            Me.getProcessInstanceDataSlotsAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotsAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.getProcessInstanceDataSlotsOperationCompleted Is Nothing) Then
                Me.getProcessInstanceDataSlotsOperationCompleted = AddressOf Me.OngetProcessInstanceDataSlotsOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceDataSlots", New Object() {session, piName}, Me.getProcessInstanceDataSlotsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceDataSlotsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceDataSlotsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceDataSlotsCompleted(Me, New getProcessInstanceDataSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceDataSlot(ByVal session As String, ByVal piName As String, <System.Xml.Serialization.XmlElementAttribute("dsName")> ByVal dsName() As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceDataSlotReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getProcessInstanceDataSlot", New Object() {session, piName, dsName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotAsync(ByVal session As String, ByVal piName As String, ByVal dsName() As String)
            Me.getProcessInstanceDataSlotAsync(session, piName, dsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotAsync(ByVal session As String, ByVal piName As String, ByVal dsName() As String, ByVal userState As Object)
            If (Me.getProcessInstanceDataSlotOperationCompleted Is Nothing) Then
                Me.getProcessInstanceDataSlotOperationCompleted = AddressOf Me.OngetProcessInstanceDataSlotOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceDataSlot", New Object() {session, piName, dsName}, Me.getProcessInstanceDataSlotOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceDataSlotOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceDataSlotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceDataSlotCompleted(Me, New getProcessInstanceDataSlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceDataSlotFromPIID(ByVal session As String, ByVal piid As Long, <System.Xml.Serialization.XmlElementAttribute("dsName")> ByVal dsName() As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceDataSlotFromPIIDReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getProcessInstanceDataSlotFromPIID", New Object() {session, piid, dsName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal dsName() As String)
            Me.getProcessInstanceDataSlotFromPIIDAsync(session, piid, dsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceDataSlotFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal dsName() As String, ByVal userState As Object)
            If (Me.getProcessInstanceDataSlotFromPIIDOperationCompleted Is Nothing) Then
                Me.getProcessInstanceDataSlotFromPIIDOperationCompleted = AddressOf Me.OngetProcessInstanceDataSlotFromPIIDOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceDataSlotFromPIID", New Object() {session, piid, dsName}, Me.getProcessInstanceDataSlotFromPIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceDataSlotFromPIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceDataSlotFromPIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceDataSlotFromPIIDCompleted(Me, New getProcessInstanceDataSlotFromPIIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepInstanceDataSlots(ByVal session As String, ByVal piName As String, ByVal wsiName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepInstanceDataSlotsReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getWorkStepInstanceDataSlots", New Object() {session, piName, wsiName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceDataSlotsAsync(ByVal session As String, ByVal piName As String, ByVal wsiName As String)
            Me.getWorkStepInstanceDataSlotsAsync(session, piName, wsiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceDataSlotsAsync(ByVal session As String, ByVal piName As String, ByVal wsiName As String, ByVal userState As Object)
            If (Me.getWorkStepInstanceDataSlotsOperationCompleted Is Nothing) Then
                Me.getWorkStepInstanceDataSlotsOperationCompleted = AddressOf Me.OngetWorkStepInstanceDataSlotsOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepInstanceDataSlots", New Object() {session, piName, wsiName}, Me.getWorkStepInstanceDataSlotsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepInstanceDataSlotsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepInstanceDataSlotsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepInstanceDataSlotsCompleted(Me, New getWorkStepInstanceDataSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepInstanceDataSlotsFromPIID(ByVal session As String, ByVal piid As Long, ByVal wsiName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepInstanceDataSlotsFromPIIDReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getWorkStepInstanceDataSlotsFromPIID", New Object() {session, piid, wsiName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceDataSlotsFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal wsiName As String)
            Me.getWorkStepInstanceDataSlotsFromPIIDAsync(session, piid, wsiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceDataSlotsFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal wsiName As String, ByVal userState As Object)
            If (Me.getWorkStepInstanceDataSlotsFromPIIDOperationCompleted Is Nothing) Then
                Me.getWorkStepInstanceDataSlotsFromPIIDOperationCompleted = AddressOf Me.OngetWorkStepInstanceDataSlotsFromPIIDOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepInstanceDataSlotsFromPIID", New Object() {session, piid, wsiName}, Me.getWorkStepInstanceDataSlotsFromPIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepInstanceDataSlotsFromPIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepInstanceDataSlotsFromPIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepInstanceDataSlotsFromPIIDCompleted(Me, New getWorkStepInstanceDataSlotsFromPIIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkItemDataSlots(ByVal session As String, ByVal wiName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkItemDataSlotsReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getWorkItemDataSlots", New Object() {session, wiName})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkItemDataSlotsAsync(ByVal session As String, ByVal wiName As String)
            Me.getWorkItemDataSlotsAsync(session, wiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkItemDataSlotsAsync(ByVal session As String, ByVal wiName As String, ByVal userState As Object)
            If (Me.getWorkItemDataSlotsOperationCompleted Is Nothing) Then
                Me.getWorkItemDataSlotsOperationCompleted = AddressOf Me.OngetWorkItemDataSlotsOperationCompleted
            End If
            Me.InvokeAsync("getWorkItemDataSlots", New Object() {session, wiName}, Me.getWorkItemDataSlotsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkItemDataSlotsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkItemDataSlotsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkItemDataSlotsCompleted(Me, New getWorkItemDataSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkItemDataSlotsFromWIID(ByVal session As String, ByVal wiid As Long) As <System.Xml.Serialization.XmlElementAttribute("getWorkItemDataSlotsFromWIIDReturn")> DataSlotinstance()
            Dim results() As Object = Me.Invoke("getWorkItemDataSlotsFromWIID", New Object() {session, wiid})
            Return CType(results(0),DataSlotinstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkItemDataSlotsFromWIIDAsync(ByVal session As String, ByVal wiid As Long)
            Me.getWorkItemDataSlotsFromWIIDAsync(session, wiid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkItemDataSlotsFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal userState As Object)
            If (Me.getWorkItemDataSlotsFromWIIDOperationCompleted Is Nothing) Then
                Me.getWorkItemDataSlotsFromWIIDOperationCompleted = AddressOf Me.OngetWorkItemDataSlotsFromWIIDOperationCompleted
            End If
            Me.InvokeAsync("getWorkItemDataSlotsFromWIID", New Object() {session, wiid}, Me.getWorkItemDataSlotsFromWIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkItemDataSlotsFromWIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkItemDataSlotsFromWIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkItemDataSlotsFromWIIDCompleted(Me, New getWorkItemDataSlotsFromWIIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepTemplateDataSlots(ByVal session As String, ByVal ptName As String, ByVal wsName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepTemplateDataSlotsReturn")> DataSlotTemplate()
            Dim results() As Object = Me.Invoke("getWorkStepTemplateDataSlots", New Object() {session, ptName, wsName})
            Return CType(results(0),DataSlotTemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateDataSlotsAsync(ByVal session As String, ByVal ptName As String, ByVal wsName As String)
            Me.getWorkStepTemplateDataSlotsAsync(session, ptName, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateDataSlotsAsync(ByVal session As String, ByVal ptName As String, ByVal wsName As String, ByVal userState As Object)
            If (Me.getWorkStepTemplateDataSlotsOperationCompleted Is Nothing) Then
                Me.getWorkStepTemplateDataSlotsOperationCompleted = AddressOf Me.OngetWorkStepTemplateDataSlotsOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepTemplateDataSlots", New Object() {session, ptName, wsName}, Me.getWorkStepTemplateDataSlotsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepTemplateDataSlotsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepTemplateDataSlotsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepTemplateDataSlotsCompleted(Me, New getWorkStepTemplateDataSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepTemplateDataSlotsFromPTID(ByVal session As String, ByVal ptid As Long, ByVal wsName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepTemplateDataSlotsFromPTIDReturn")> DataSlotTemplate()
            Dim results() As Object = Me.Invoke("getWorkStepTemplateDataSlotsFromPTID", New Object() {session, ptid, wsName})
            Return CType(results(0),DataSlotTemplate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateDataSlotsFromPTIDAsync(ByVal session As String, ByVal ptid As Long, ByVal wsName As String)
            Me.getWorkStepTemplateDataSlotsFromPTIDAsync(session, ptid, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepTemplateDataSlotsFromPTIDAsync(ByVal session As String, ByVal ptid As Long, ByVal wsName As String, ByVal userState As Object)
            If (Me.getWorkStepTemplateDataSlotsFromPTIDOperationCompleted Is Nothing) Then
                Me.getWorkStepTemplateDataSlotsFromPTIDOperationCompleted = AddressOf Me.OngetWorkStepTemplateDataSlotsFromPTIDOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepTemplateDataSlotsFromPTID", New Object() {session, ptid, wsName}, Me.getWorkStepTemplateDataSlotsFromPTIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepTemplateDataSlotsFromPTIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepTemplateDataSlotsFromPTIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepTemplateDataSlotsFromPTIDCompleted(Me, New getWorkStepTemplateDataSlotsFromPTIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessTemplateDataSlotValue(ByVal session As String, ByVal ptName As String, ByVal dst As DataSlotTemplate)
            Me.Invoke("setProcessTemplateDataSlotValue", New Object() {session, ptName, dst})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessTemplateDataSlotValueAsync(ByVal session As String, ByVal ptName As String, ByVal dst As DataSlotTemplate)
            Me.setProcessTemplateDataSlotValueAsync(session, ptName, dst, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessTemplateDataSlotValueAsync(ByVal session As String, ByVal ptName As String, ByVal dst As DataSlotTemplate, ByVal userState As Object)
            If (Me.setProcessTemplateDataSlotValueOperationCompleted Is Nothing) Then
                Me.setProcessTemplateDataSlotValueOperationCompleted = AddressOf Me.OnsetProcessTemplateDataSlotValueOperationCompleted
            End If
            Me.InvokeAsync("setProcessTemplateDataSlotValue", New Object() {session, ptName, dst}, Me.setProcessTemplateDataSlotValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessTemplateDataSlotValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessTemplateDataSlotValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessTemplateDataSlotValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessTemplateDataSlotsValue(ByVal session As String, ByVal ptName As String, <System.Xml.Serialization.XmlElementAttribute("dst")> ByVal dst() As DataSlotTemplate)
            Me.Invoke("setProcessTemplateDataSlotsValue", New Object() {session, ptName, dst})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessTemplateDataSlotsValueAsync(ByVal session As String, ByVal ptName As String, ByVal dst() As DataSlotTemplate)
            Me.setProcessTemplateDataSlotsValueAsync(session, ptName, dst, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessTemplateDataSlotsValueAsync(ByVal session As String, ByVal ptName As String, ByVal dst() As DataSlotTemplate, ByVal userState As Object)
            If (Me.setProcessTemplateDataSlotsValueOperationCompleted Is Nothing) Then
                Me.setProcessTemplateDataSlotsValueOperationCompleted = AddressOf Me.OnsetProcessTemplateDataSlotsValueOperationCompleted
            End If
            Me.InvokeAsync("setProcessTemplateDataSlotsValue", New Object() {session, ptName, dst}, Me.setProcessTemplateDataSlotsValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessTemplateDataSlotsValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessTemplateDataSlotsValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessTemplateDataSlotsValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessInstanceDataSlotValue(ByVal session As String, ByVal piName As String, ByVal dsi As DataSlotinstance)
            Me.Invoke("setProcessInstanceDataSlotValue", New Object() {session, piName, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDataSlotValueAsync(ByVal session As String, ByVal piName As String, ByVal dsi As DataSlotinstance)
            Me.setProcessInstanceDataSlotValueAsync(session, piName, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDataSlotValueAsync(ByVal session As String, ByVal piName As String, ByVal dsi As DataSlotinstance, ByVal userState As Object)
            If (Me.setProcessInstanceDataSlotValueOperationCompleted Is Nothing) Then
                Me.setProcessInstanceDataSlotValueOperationCompleted = AddressOf Me.OnsetProcessInstanceDataSlotValueOperationCompleted
            End If
            Me.InvokeAsync("setProcessInstanceDataSlotValue", New Object() {session, piName, dsi}, Me.setProcessInstanceDataSlotValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessInstanceDataSlotValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessInstanceDataSlotValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessInstanceDataSlotValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessInstanceDataSlotsValue(ByVal session As String, ByVal piName As String, <System.Xml.Serialization.XmlElementAttribute("dsi")> ByVal dsi() As DataSlotinstance)
            Me.Invoke("setProcessInstanceDataSlotsValue", New Object() {session, piName, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDataSlotsValueAsync(ByVal session As String, ByVal piName As String, ByVal dsi() As DataSlotinstance)
            Me.setProcessInstanceDataSlotsValueAsync(session, piName, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDataSlotsValueAsync(ByVal session As String, ByVal piName As String, ByVal dsi() As DataSlotinstance, ByVal userState As Object)
            If (Me.setProcessInstanceDataSlotsValueOperationCompleted Is Nothing) Then
                Me.setProcessInstanceDataSlotsValueOperationCompleted = AddressOf Me.OnsetProcessInstanceDataSlotsValueOperationCompleted
            End If
            Me.InvokeAsync("setProcessInstanceDataSlotsValue", New Object() {session, piName, dsi}, Me.setProcessInstanceDataSlotsValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessInstanceDataSlotsValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessInstanceDataSlotsValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessInstanceDataSlotsValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setWorkItemDataSlotsValue(ByVal session As String, ByVal wiName As String, <System.Xml.Serialization.XmlElementAttribute("dsi")> ByVal dsi() As DataSlotinstance)
            Me.Invoke("setWorkItemDataSlotsValue", New Object() {session, wiName, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setWorkItemDataSlotsValueAsync(ByVal session As String, ByVal wiName As String, ByVal dsi() As DataSlotinstance)
            Me.setWorkItemDataSlotsValueAsync(session, wiName, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setWorkItemDataSlotsValueAsync(ByVal session As String, ByVal wiName As String, ByVal dsi() As DataSlotinstance, ByVal userState As Object)
            If (Me.setWorkItemDataSlotsValueOperationCompleted Is Nothing) Then
                Me.setWorkItemDataSlotsValueOperationCompleted = AddressOf Me.OnsetWorkItemDataSlotsValueOperationCompleted
            End If
            Me.InvokeAsync("setWorkItemDataSlotsValue", New Object() {session, wiName, dsi}, Me.setWorkItemDataSlotsValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetWorkItemDataSlotsValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setWorkItemDataSlotsValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setWorkItemDataSlotsValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setWorkItemDataSlotValue(ByVal session As String, ByVal wiName As String, ByVal dsi As DataSlotinstance)
            Me.Invoke("setWorkItemDataSlotValue", New Object() {session, wiName, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setWorkItemDataSlotValueAsync(ByVal session As String, ByVal wiName As String, ByVal dsi As DataSlotinstance)
            Me.setWorkItemDataSlotValueAsync(session, wiName, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setWorkItemDataSlotValueAsync(ByVal session As String, ByVal wiName As String, ByVal dsi As DataSlotinstance, ByVal userState As Object)
            If (Me.setWorkItemDataSlotValueOperationCompleted Is Nothing) Then
                Me.setWorkItemDataSlotValueOperationCompleted = AddressOf Me.OnsetWorkItemDataSlotValueOperationCompleted
            End If
            Me.InvokeAsync("setWorkItemDataSlotValue", New Object() {session, wiName, dsi}, Me.setWorkItemDataSlotValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetWorkItemDataSlotValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.setWorkItemDataSlotValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setWorkItemDataSlotValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceFromID(ByVal session As String, ByVal piid As Long) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceFromIDReturn")> ProcessInstance
            Dim results() As Object = Me.Invoke("getProcessInstanceFromID", New Object() {session, piid})
            Return CType(results(0),ProcessInstance)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceFromIDAsync(ByVal session As String, ByVal piid As Long)
            Me.getProcessInstanceFromIDAsync(session, piid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceFromIDAsync(ByVal session As String, ByVal piid As Long, ByVal userState As Object)
            If (Me.getProcessInstanceFromIDOperationCompleted Is Nothing) Then
                Me.getProcessInstanceFromIDOperationCompleted = AddressOf Me.OngetProcessInstanceFromIDOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceFromID", New Object() {session, piid}, Me.getProcessInstanceFromIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceFromIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceFromIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceFromIDCompleted(Me, New getProcessInstanceFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub setProcessInstanceDueDate(ByVal session As String, ByVal piName As String, ByVal dueDate As Date)
            Me.Invoke("setProcessInstanceDueDate", New Object() {session, piName, dueDate})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDueDateAsync(ByVal session As String, ByVal piName As String, ByVal dueDate As Date)
            Me.setProcessInstanceDueDateAsync(session, piName, dueDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setProcessInstanceDueDateAsync(ByVal session As String, ByVal piName As String, ByVal dueDate As Date, ByVal userState As Object)
            If (Me.setProcessInstanceDueDateOperationCompleted Is Nothing) Then
                Me.setProcessInstanceDueDateOperationCompleted = AddressOf Me.OnsetProcessInstanceDueDateOperationCompleted
            End If
            Me.InvokeAsync("setProcessInstanceDueDate", New Object() {session, piName, dueDate}, Me.setProcessInstanceDueDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetProcessInstanceDueDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.setProcessInstanceDueDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setProcessInstanceDueDateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkItemFromID(ByVal session As String, ByVal wiid As Long) As <System.Xml.Serialization.XmlElementAttribute("getWorkItemFromIDReturn")> WorkItem
            Dim results() As Object = Me.Invoke("getWorkItemFromID", New Object() {session, wiid})
            Return CType(results(0),WorkItem)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkItemFromIDAsync(ByVal session As String, ByVal wiid As Long)
            Me.getWorkItemFromIDAsync(session, wiid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkItemFromIDAsync(ByVal session As String, ByVal wiid As Long, ByVal userState As Object)
            If (Me.getWorkItemFromIDOperationCompleted Is Nothing) Then
                Me.getWorkItemFromIDOperationCompleted = AddressOf Me.OngetWorkItemFromIDOperationCompleted
            End If
            Me.InvokeAsync("getWorkItemFromID", New Object() {session, wiid}, Me.getWorkItemFromIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkItemFromIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkItemFromIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkItemFromIDCompleted(Me, New getWorkItemFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub suspendWorkItem(ByVal session As String, ByVal wiName As String)
            Me.Invoke("suspendWorkItem", New Object() {session, wiName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendWorkItemAsync(ByVal session As String, ByVal wiName As String)
            Me.suspendWorkItemAsync(session, wiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal userState As Object)
            If (Me.suspendWorkItemOperationCompleted Is Nothing) Then
                Me.suspendWorkItemOperationCompleted = AddressOf Me.OnsuspendWorkItemOperationCompleted
            End If
            Me.InvokeAsync("suspendWorkItem", New Object() {session, wiName}, Me.suspendWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub resumeWorkItem(ByVal session As String, ByVal wiName As String)
            Me.Invoke("resumeWorkItem", New Object() {session, wiName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeWorkItemAsync(ByVal session As String, ByVal wiName As String)
            Me.resumeWorkItemAsync(session, wiName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal userState As Object)
            If (Me.resumeWorkItemOperationCompleted Is Nothing) Then
                Me.resumeWorkItemOperationCompleted = AddressOf Me.OnresumeWorkItemOperationCompleted
            End If
            Me.InvokeAsync("resumeWorkItem", New Object() {session, wiName}, Me.resumeWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub assignWorkItemFromWIID(ByVal session As String, ByVal wiid As Long, ByVal performer As String)
            Me.Invoke("assignWorkItemFromWIID", New Object() {session, wiid, performer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performer As String)
            Me.assignWorkItemFromWIIDAsync(session, wiid, performer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub assignWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performer As String, ByVal userState As Object)
            If (Me.assignWorkItemFromWIIDOperationCompleted Is Nothing) Then
                Me.assignWorkItemFromWIIDOperationCompleted = AddressOf Me.OnassignWorkItemFromWIIDOperationCompleted
            End If
            Me.InvokeAsync("assignWorkItemFromWIID", New Object() {session, wiid, performer}, Me.assignWorkItemFromWIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnassignWorkItemFromWIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.assignWorkItemFromWIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent assignWorkItemFromWIIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub reAssignWorkItem(ByVal session As String, ByVal wiName As String, ByVal performer As String)
            Me.Invoke("reAssignWorkItem", New Object() {session, wiName, performer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub reAssignWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performer As String)
            Me.reAssignWorkItemAsync(session, wiName, performer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub reAssignWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performer As String, ByVal userState As Object)
            If (Me.reAssignWorkItemOperationCompleted Is Nothing) Then
                Me.reAssignWorkItemOperationCompleted = AddressOf Me.OnreAssignWorkItemOperationCompleted
            End If
            Me.InvokeAsync("reAssignWorkItem", New Object() {session, wiName, performer}, Me.reAssignWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnreAssignWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.reAssignWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent reAssignWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub reAssignWorkItemFromWIID(ByVal session As String, ByVal wiid As Long, ByVal performer As String)
            Me.Invoke("reAssignWorkItemFromWIID", New Object() {session, wiid, performer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub reAssignWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performer As String)
            Me.reAssignWorkItemFromWIIDAsync(session, wiid, performer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub reAssignWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performer As String, ByVal userState As Object)
            If (Me.reAssignWorkItemFromWIIDOperationCompleted Is Nothing) Then
                Me.reAssignWorkItemFromWIIDOperationCompleted = AddressOf Me.OnreAssignWorkItemFromWIIDOperationCompleted
            End If
            Me.InvokeAsync("reAssignWorkItemFromWIID", New Object() {session, wiid, performer}, Me.reAssignWorkItemFromWIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnreAssignWorkItemFromWIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.reAssignWorkItemFromWIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent reAssignWorkItemFromWIIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub makeAvailableWorkItem(ByVal session As String, ByVal wiName As String, <System.Xml.Serialization.XmlElementAttribute("performers")> ByVal performers() As String)
            Me.Invoke("makeAvailableWorkItem", New Object() {session, wiName, performers})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub makeAvailableWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performers() As String)
            Me.makeAvailableWorkItemAsync(session, wiName, performers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub makeAvailableWorkItemAsync(ByVal session As String, ByVal wiName As String, ByVal performers() As String, ByVal userState As Object)
            If (Me.makeAvailableWorkItemOperationCompleted Is Nothing) Then
                Me.makeAvailableWorkItemOperationCompleted = AddressOf Me.OnmakeAvailableWorkItemOperationCompleted
            End If
            Me.InvokeAsync("makeAvailableWorkItem", New Object() {session, wiName, performers}, Me.makeAvailableWorkItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnmakeAvailableWorkItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.makeAvailableWorkItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent makeAvailableWorkItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub makeAvailableWorkItemFromWIID(ByVal session As String, ByVal wiid As Long, <System.Xml.Serialization.XmlElementAttribute("performers")> ByVal performers() As String)
            Me.Invoke("makeAvailableWorkItemFromWIID", New Object() {session, wiid, performers})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub makeAvailableWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performers() As String)
            Me.makeAvailableWorkItemFromWIIDAsync(session, wiid, performers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub makeAvailableWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal performers() As String, ByVal userState As Object)
            If (Me.makeAvailableWorkItemFromWIIDOperationCompleted Is Nothing) Then
                Me.makeAvailableWorkItemFromWIIDOperationCompleted = AddressOf Me.OnmakeAvailableWorkItemFromWIIDOperationCompleted
            End If
            Me.InvokeAsync("makeAvailableWorkItemFromWIID", New Object() {session, wiid, performers}, Me.makeAvailableWorkItemFromWIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnmakeAvailableWorkItemFromWIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.makeAvailableWorkItemFromWIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent makeAvailableWorkItemFromWIIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub completeWorkItemFromWIID(ByVal session As String, ByVal wiid As Long, <System.Xml.Serialization.XmlElementAttribute("dsi")> ByVal dsi() As DataSlotinstance)
            Me.Invoke("completeWorkItemFromWIID", New Object() {session, wiid, dsi})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub completeWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal dsi() As DataSlotinstance)
            Me.completeWorkItemFromWIIDAsync(session, wiid, dsi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub completeWorkItemFromWIIDAsync(ByVal session As String, ByVal wiid As Long, ByVal dsi() As DataSlotinstance, ByVal userState As Object)
            If (Me.completeWorkItemFromWIIDOperationCompleted Is Nothing) Then
                Me.completeWorkItemFromWIIDOperationCompleted = AddressOf Me.OncompleteWorkItemFromWIIDOperationCompleted
            End If
            Me.InvokeAsync("completeWorkItemFromWIID", New Object() {session, wiid, dsi}, Me.completeWorkItemFromWIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OncompleteWorkItemFromWIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.completeWorkItemFromWIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent completeWorkItemFromWIIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getWorkStepInstanceFromPIID(ByVal session As String, ByVal piid As Long, ByVal wsName As String) As <System.Xml.Serialization.XmlElementAttribute("getWorkStepInstanceFromPIIDReturn")> WorkStepInstance
            Dim results() As Object = Me.Invoke("getWorkStepInstanceFromPIID", New Object() {session, piid, wsName})
            Return CType(results(0),WorkStepInstance)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal wsName As String)
            Me.getWorkStepInstanceFromPIIDAsync(session, piid, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getWorkStepInstanceFromPIIDAsync(ByVal session As String, ByVal piid As Long, ByVal wsName As String, ByVal userState As Object)
            If (Me.getWorkStepInstanceFromPIIDOperationCompleted Is Nothing) Then
                Me.getWorkStepInstanceFromPIIDOperationCompleted = AddressOf Me.OngetWorkStepInstanceFromPIIDOperationCompleted
            End If
            Me.InvokeAsync("getWorkStepInstanceFromPIID", New Object() {session, piid, wsName}, Me.getWorkStepInstanceFromPIIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetWorkStepInstanceFromPIIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getWorkStepInstanceFromPIIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getWorkStepInstanceFromPIIDCompleted(Me, New getWorkStepInstanceFromPIIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProcessInstanceWorkSteps(ByVal session As String, ByVal piName As String) As <System.Xml.Serialization.XmlElementAttribute("getProcessInstanceWorkStepsReturn")> WorkStepInstance()
            Dim results() As Object = Me.Invoke("getProcessInstanceWorkSteps", New Object() {session, piName})
            Return CType(results(0),WorkStepInstance())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceWorkStepsAsync(ByVal session As String, ByVal piName As String)
            Me.getProcessInstanceWorkStepsAsync(session, piName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProcessInstanceWorkStepsAsync(ByVal session As String, ByVal piName As String, ByVal userState As Object)
            If (Me.getProcessInstanceWorkStepsOperationCompleted Is Nothing) Then
                Me.getProcessInstanceWorkStepsOperationCompleted = AddressOf Me.OngetProcessInstanceWorkStepsOperationCompleted
            End If
            Me.InvokeAsync("getProcessInstanceWorkSteps", New Object() {session, piName}, Me.getProcessInstanceWorkStepsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProcessInstanceWorkStepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProcessInstanceWorkStepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProcessInstanceWorkStepsCompleted(Me, New getProcessInstanceWorkStepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub suspendWorkStepInstance(ByVal session As String, ByVal piName As String, ByVal wsName As String)
            Me.Invoke("suspendWorkStepInstance", New Object() {session, piName, wsName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String)
            Me.suspendWorkStepInstanceAsync(session, piName, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String, ByVal userState As Object)
            If (Me.suspendWorkStepInstanceOperationCompleted Is Nothing) Then
                Me.suspendWorkStepInstanceOperationCompleted = AddressOf Me.OnsuspendWorkStepInstanceOperationCompleted
            End If
            Me.InvokeAsync("suspendWorkStepInstance", New Object() {session, piName, wsName}, Me.suspendWorkStepInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendWorkStepInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendWorkStepInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendWorkStepInstanceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub resumeWorkStepInstance(ByVal session As String, ByVal piName As String, ByVal wsName As String)
            Me.Invoke("resumeWorkStepInstance", New Object() {session, piName, wsName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String)
            Me.resumeWorkStepInstanceAsync(session, piName, wsName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeWorkStepInstanceAsync(ByVal session As String, ByVal piName As String, ByVal wsName As String, ByVal userState As Object)
            If (Me.resumeWorkStepInstanceOperationCompleted Is Nothing) Then
                Me.resumeWorkStepInstanceOperationCompleted = AddressOf Me.OnresumeWorkStepInstanceOperationCompleted
            End If
            Me.InvokeAsync("resumeWorkStepInstance", New Object() {session, piName, wsName}, Me.resumeWorkStepInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeWorkStepInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeWorkStepInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeWorkStepInstanceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://workflow.webservice.savvion.com", ResponseNamespace:="http://workflow.webservice.savvion.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStartWorkStepTemplate(ByVal session As String, ByVal ptname As String) As <System.Xml.Serialization.XmlElementAttribute("getStartWorkStepTemplateReturn")> WorkSteptemplate
            Dim results() As Object = Me.Invoke("getStartWorkStepTemplate", New Object() {session, ptname})
            Return CType(results(0),WorkSteptemplate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStartWorkStepTemplateAsync(ByVal session As String, ByVal ptname As String)
            Me.getStartWorkStepTemplateAsync(session, ptname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStartWorkStepTemplateAsync(ByVal session As String, ByVal ptname As String, ByVal userState As Object)
            If (Me.getStartWorkStepTemplateOperationCompleted Is Nothing) Then
                Me.getStartWorkStepTemplateOperationCompleted = AddressOf Me.OngetStartWorkStepTemplateOperationCompleted
            End If
            Me.InvokeAsync("getStartWorkStepTemplate", New Object() {session, ptname}, Me.getStartWorkStepTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStartWorkStepTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStartWorkStepTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStartWorkStepTemplateCompleted(Me, New getStartWorkStepTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class ProcessTemplate
        
        Private appNameField As String
        
        Private categoryField As String
        
        Private descriptionField As String
        
        Private groupField As String
        
        Private idField As Long
        
        Private managerField As String
        
        Private nameField As String
        
        Private priorityField As String
        
        Private startTimeField As System.Nullable(Of Date)
        
        Private stateField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property appName() As String
            Get
                Return Me.appNameField
            End Get
            Set
                Me.appNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property category() As String
            Get
                Return Me.categoryField
            End Get
            Set
                Me.categoryField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property group() As String
            Get
                Return Me.groupField
            End Get
            Set
                Me.groupField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property id() As Long
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property manager() As String
            Get
                Return Me.managerField
            End Get
            Set
                Me.managerField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property priority() As String
            Get
                Return Me.priorityField
            End Get
            Set
                Me.priorityField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property startTime() As System.Nullable(Of Date)
            Get
                Return Me.startTimeField
            End Get
            Set
                Me.startTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property state() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class WorkItem
        
        Private duedateField As System.Nullable(Of Date)
        
        Private idField As Long
        
        Private nameField As String
        
        Private performerField As String
        
        Private piCreatorField As String
        
        Private piNameField As String
        
        Private piidField As Long
        
        Private priorityField As String
        
        Private ptidField As Long
        
        Private statusField As String
        
        Private timeStartedField As System.Nullable(Of Date)
        
        Private wsNameField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property duedate() As System.Nullable(Of Date)
            Get
                Return Me.duedateField
            End Get
            Set
                Me.duedateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property id() As Long
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property performer() As String
            Get
                Return Me.performerField
            End Get
            Set
                Me.performerField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property piCreator() As String
            Get
                Return Me.piCreatorField
            End Get
            Set
                Me.piCreatorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property piName() As String
            Get
                Return Me.piNameField
            End Get
            Set
                Me.piNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property piid() As Long
            Get
                Return Me.piidField
            End Get
            Set
                Me.piidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property priority() As String
            Get
                Return Me.priorityField
            End Get
            Set
                Me.priorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property timeStarted() As System.Nullable(Of Date)
            Get
                Return Me.timeStartedField
            End Get
            Set
                Me.timeStartedField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property wsName() As String
            Get
                Return Me.wsNameField
            End Get
            Set
                Me.wsNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class WorkSteptemplate
        
        Private durationField As Long
        
        Private nameField As String
        
        Private performerField As String
        
        Private priorityField As String
        
        Private ptidField As Long
        
        Private typeField As String
        
        '''<remarks/>
        Public Property duration() As Long
            Get
                Return Me.durationField
            End Get
            Set
                Me.durationField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property performer() As String
            Get
                Return Me.performerField
            End Get
            Set
                Me.performerField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property priority() As String
            Get
                Return Me.priorityField
            End Get
            Set
                Me.priorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class WorkStepInstance
        
        Private dueDateField As System.Nullable(Of Date)
        
        Private loopCounterField As Integer
        
        Private nameField As String
        
        Private performerField As String
        
        Private piNameField As String
        
        Private piidField As Long
        
        Private priorityField As String
        
        Private ptidField As Long
        
        Private startTimeField As System.Nullable(Of Date)
        
        Private statusField As String
        
        Private typeField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property dueDate() As System.Nullable(Of Date)
            Get
                Return Me.dueDateField
            End Get
            Set
                Me.dueDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property loopCounter() As Integer
            Get
                Return Me.loopCounterField
            End Get
            Set
                Me.loopCounterField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property performer() As String
            Get
                Return Me.performerField
            End Get
            Set
                Me.performerField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property piName() As String
            Get
                Return Me.piNameField
            End Get
            Set
                Me.piNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property piid() As Long
            Get
                Return Me.piidField
            End Get
            Set
                Me.piidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property priority() As String
            Get
                Return Me.priorityField
            End Get
            Set
                Me.priorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property startTime() As System.Nullable(Of Date)
            Get
                Return Me.startTimeField
            End Get
            Set
                Me.startTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class DataSlotTemplate
        
        Private choicesField As String
        
        Private isReadOnlyField As Boolean
        
        Private isWriteOnlyField As Boolean
        
        Private nameField As String
        
        Private ptidField As Long
        
        Private typeField As String
        
        Private valueField As Object
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property choices() As String
            Get
                Return Me.choicesField
            End Get
            Set
                Me.choicesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isReadOnly() As Boolean
            Get
                Return Me.isReadOnlyField
            End Get
            Set
                Me.isReadOnlyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isWriteOnly() As Boolean
            Get
                Return Me.isWriteOnlyField
            End Get
            Set
                Me.isWriteOnlyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class ProcessInstance
        
        Private creatorField As String
        
        Private dueDateField As System.Nullable(Of Date)
        
        Private idField As Long
        
        Private isSubProcessField As Boolean
        
        Private isSyncSubProcessField As Boolean
        
        Private nameField As String
        
        Private priorityField As String
        
        Private ptidField As Long
        
        Private startTimeField As System.Nullable(Of Date)
        
        Private statusField As String
        
        Private subProcessField As Boolean
        
        Private syncSubProcessField As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property creator() As String
            Get
                Return Me.creatorField
            End Get
            Set
                Me.creatorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property dueDate() As System.Nullable(Of Date)
            Get
                Return Me.dueDateField
            End Get
            Set
                Me.dueDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property id() As Long
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isSubProcess() As Boolean
            Get
                Return Me.isSubProcessField
            End Get
            Set
                Me.isSubProcessField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isSyncSubProcess() As Boolean
            Get
                Return Me.isSyncSubProcessField
            End Get
            Set
                Me.isSyncSubProcessField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property priority() As String
            Get
                Return Me.priorityField
            End Get
            Set
                Me.priorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property startTime() As System.Nullable(Of Date)
            Get
                Return Me.startTimeField
            End Get
            Set
                Me.startTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subProcess() As Boolean
            Get
                Return Me.subProcessField
            End Get
            Set
                Me.subProcessField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property syncSubProcess() As Boolean
            Get
                Return Me.syncSubProcessField
            End Get
            Set
                Me.syncSubProcessField = value
            End Set
        End Property

        Public Sub New()

        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://workflow.webservice.savvion.com")>  _
    Partial Public Class DataSlotinstance
        
        Private choicesField As String
        
        Private isReadOnlyField As Boolean
        
        Private isWriteOnlyField As Boolean
        
        Private nameField As String
        
        Private piidField As Long
        
        Private ptidField As Long
        
        Private typeField As String
        
        Private valueField As Object
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property choices() As String
            Get
                Return Me.choicesField
            End Get
            Set
                Me.choicesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isReadOnly() As Boolean
            Get
                Return Me.isReadOnlyField
            End Get
            Set
                Me.isReadOnlyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isWriteOnly() As Boolean
            Get
                Return Me.isWriteOnlyField
            End Get
            Set
                Me.isWriteOnlyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property piid() As Long
            Get
                Return Me.piidField
            End Get
            Set
                Me.piidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ptid() As Long
            Get
                Return Me.ptidField
            End Get
            Set
                Me.ptidField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub connectCompletedEventHandler(ByVal sender As Object, ByVal e As connectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class connectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub disconnectCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessTemplate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessTemplate)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub isSessionValidCompletedEventHandler(ByVal sender As Object, ByVal e As isSessionValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isSessionValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getUserAuthorizedProcessTemplateListCompletedEventHandler(ByVal sender As Object, ByVal e As getUserAuthorizedProcessTemplateListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserAuthorizedProcessTemplateListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessTemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessTemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub completeWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceListCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessInstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessInstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub assignWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateIDCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub createProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As createProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessInstance
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessInstance)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkStepInstance
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkStepInstance)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkSteptemplate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkSteptemplate)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getAvailableWorkItemListCompletedEventHandler(ByVal sender As Object, ByVal e As getAvailableWorkItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAvailableWorkItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getAssignedWorkItemListCompletedEventHandler(ByVal sender As Object, ByVal e As getAssignedWorkItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAssignedWorkItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessInstance
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessInstance)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateVersionsCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateVersionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateVersionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessInstancePriorityCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateXMLCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub removeProcessTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub resumeProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub suspendProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub isProcessTemplateExistCompletedEventHandler(ByVal sender As Object, ByVal e As isProcessTemplateExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isProcessTemplateExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProxyAssignedWorkItemListCompletedEventHandler(ByVal sender As Object, ByVal e As getProxyAssignedWorkItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProxyAssignedWorkItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProxyAvailableWorkItemListCompletedEventHandler(ByVal sender As Object, ByVal e As getProxyAvailableWorkItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProxyAvailableWorkItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getSuspendedWorkItemListCompletedEventHandler(ByVal sender As Object, ByVal e As getSuspendedWorkItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSuspendedWorkItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getUserAuthorizedProcessTemplateNamesCompletedEventHandler(ByVal sender As Object, ByVal e As getUserAuthorizedProcessTemplateNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserAuthorizedProcessTemplateNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateAppNameCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateAppNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateAppNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateNameFromProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateNameFromProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateNameFromProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateNameFromProcessIDCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateNameFromProcessIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateNameFromProcessIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateWorkStepsCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateWorkStepsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateWorkStepsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkSteptemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkSteptemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateFromIDCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateFromIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateFromIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessTemplate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessTemplate)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateDataSlotsCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateDataSlotsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateDataSlotsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotTemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotTemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessTemplateDataSlotCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessTemplateDataSlotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessTemplateDataSlotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotTemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotTemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceDataSlotsCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceDataSlotsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceDataSlotsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceDataSlotCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceDataSlotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceDataSlotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceDataSlotFromPIIDCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceDataSlotFromPIIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceDataSlotFromPIIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepInstanceDataSlotsCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepInstanceDataSlotsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepInstanceDataSlotsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepInstanceDataSlotsFromPIIDCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepInstanceDataSlotsFromPIIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepInstanceDataSlotsFromPIIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkItemDataSlotsCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkItemDataSlotsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkItemDataSlotsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkItemDataSlotsFromWIIDCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkItemDataSlotsFromWIIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkItemDataSlotsFromWIIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotinstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotinstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepTemplateDataSlotsCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepTemplateDataSlotsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepTemplateDataSlotsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotTemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotTemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepTemplateDataSlotsFromPTIDCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepTemplateDataSlotsFromPTIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepTemplateDataSlotsFromPTIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DataSlotTemplate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DataSlotTemplate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessTemplateDataSlotValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessTemplateDataSlotsValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessInstanceDataSlotValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessInstanceDataSlotsValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setWorkItemDataSlotsValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setWorkItemDataSlotValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceFromIDCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceFromIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceFromIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessInstance
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessInstance)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setProcessInstanceDueDateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkItemFromIDCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkItemFromIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkItemFromIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkItem
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkItem)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub suspendWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub resumeWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub assignWorkItemFromWIIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub reAssignWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub reAssignWorkItemFromWIIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub makeAvailableWorkItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub makeAvailableWorkItemFromWIIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub completeWorkItemFromWIIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getWorkStepInstanceFromPIIDCompletedEventHandler(ByVal sender As Object, ByVal e As getWorkStepInstanceFromPIIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getWorkStepInstanceFromPIIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkStepInstance
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkStepInstance)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getProcessInstanceWorkStepsCompletedEventHandler(ByVal sender As Object, ByVal e As getProcessInstanceWorkStepsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProcessInstanceWorkStepsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkStepInstance()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkStepInstance())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub suspendWorkStepInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub resumeWorkStepInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getStartWorkStepTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As getStartWorkStepTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStartWorkStepTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WorkSteptemplate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WorkSteptemplate)
            End Get
        End Property
    End Class
End Namespace
