; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
InternalCompressLevel=Max
OutputBaseFilename=AutoEdgeTheFactorySetup-1.0.3
SolidCompression=true
VersionInfoVersion=1.0.3
VersionInfoCompany=Progress Software Corp.
VersionInfoDescription=OpenEdge AutoEdge|TheFactory Application Example Setup
MinVersion=0,5.0.2195sp3
AppCopyright=Copyright 2011 © Progress Software Corp.
AppName=OpenEdge AutoEdge|TheFactory Application Example
AppVerName=OpenEdge AutoEdge|TheFactory Application Example 1.0.x
InfoAfterFile=installer\include\InfoAfter.txt
InfoBeforeFile=installer\include\InfoBefore.txt
LicenseFile=installer\include\License.txt
DefaultDirName={pf}\OpenEdgeAE\AutoEdge\Factory
EnableDirDoesntExistWarning=true
AllowUNCPath=false
DefaultGroupName=OpenEdge Application Example
DisableStartupPrompt=false
AlwaysShowComponentsList=true
ShowLanguageDialog=auto
SetupIconFile=installer\include\autoedge.ico
AppID={{62CE4B50-E7A0-4279-9889-0D6EC3B80C0E}
VersionInfoTextVersion=1.0.3
AppPublisher=Progress Software Corp.
AppPublisherURL=http://www.progress.com
AppSupportURL=http://support.progress.com
AppVersion=1.0.3
UninstallDisplayName=OpenEdge AutoEdge|TheFactory Application Example
ExtraDiskSpaceRequired=1000000
AlwaysRestart=false
AllowCancelDuringInstall=true
AlwaysShowDirOnReadyPage=true
AlwaysShowGroupOnReadyPage=true
UninstallLogMode=new
RestartIfNeededByRun=false
SetupLogging=true
OutputDir=installer\output
PrivilegesRequired=none
; Use relative paths?
;SourceDir=..
SourceDir=C:\devarea\projects\OEBP
WizardImageBackColor=$00400000
AllowRootDirectory=true

[Dirs]
; AETF
Name: {app}\autoedgethefactory\shared; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\bin; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\src; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\cfg; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\doc; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\resources; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\shared\tests; Flags: uninsneveruninstall; Components: AETF_CLIENT AETF_SERVER; Tasks: 

Name: {app}\autoedgethefactory\server; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\bin; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\src; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\temp; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\tests; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\cfg; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\db; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\setup; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\doc; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\resources; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 
Name: {app}\autoedgethefactory\server\logs; Flags: uninsneveruninstall; Components: AETF_SERVER; Tasks: 

Name: {app}\autoedgethefactory\client; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\bin; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\src; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\tests; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\doc; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\cfg; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\resources; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client\temp; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 
Name: {app}\autoedgethefactory\client; Flags: uninsneveruninstall; Components: AETF_CLIENT; Tasks: 

;OERA: PresentationLayer
Name: {app}\referencecomponents\presentationlayer; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\src; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\bin; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\doc; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\resources; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\temp; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\presentationlayer\tests; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 

;OERA: EnterpriseServices
Name: {app}\referencecomponents\enterpriseservices; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\src; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\bin; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\doc; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\resource; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\temp; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\enterpriseservices\tests; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 

;OERA: BusinessComponents
Name: {app}\referencecomponents\businesscomponents; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\src; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\bin; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\doc; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\temp; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\tests; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\businesscomponents\resources; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 

;OERA: DataAccess
Name: {app}\referencecomponents\dataaccess; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\src; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\bin; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\doc; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\resources; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\temp; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\dataaccess\tests; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 

;OERA: CommonInfrastructure
Name: {app}\referencecomponents\commoninfrastructure; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 

Name: {app}\referencecomponents\commoninfrastructure\shared; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\src; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\bin; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\doc; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\resources; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\tests; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\shared\temp; Flags: uninsneveruninstall; Components: OERA_CLIENT OERA_SERVER; Tasks: 

Name: {app}\referencecomponents\commoninfrastructure\client; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\src; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\bin; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\resources; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\doc; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\tests; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\client\temp; Flags: uninsneveruninstall; Components: OERA_CLIENT; Tasks: 

Name: {app}\referencecomponents\commoninfrastructure\server; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\src; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\bin; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\temp; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\tests; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\doc; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\commoninfrastructure\server\resources; Flags: uninsneveruninstall; Components: OERA_SERVER; Tasks: 

;General Support
Name: {app}\referencecomponents\support; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\src; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\bin; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\doc; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\resources; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\tests; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 
Name: {app}\referencecomponents\support\temp; Flags: uninsneveruninstall; Components: SUPPORT AETF_CLIENT AETF_SERVER OERA_CLIENT OERA_SERVER; Tasks: 

; Savvion Processes
Name: {app}\autoedgethefactory\savvion; Flags: uninsneveruninstall; Components: ; Tasks: 

[Files]
; Root
Source: autodox2-index.html; DestDir: {app}; Flags: ignoreversion uninsremovereadonly; Tasks: 

;AETF
;client
Source: autoedgethefactory\client\cfg\*.*; DestDir: {app}\autoedgethefactory\client\cfg; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: AETF_CLIENT; 
Source: autoedgethefactory\client\src\*.*; DestDir: {app}\autoedgethefactory\client\src; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_CLIENT; Tasks: 
Source: autoedgethefactory\client\doc\*.*; DestDir: {app}\autoedgethefactory\client\doc; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: AETF_CLIENT; Tasks: 
Source: autoedgethefactory\client\tests\*.*; DestDir: {app}\autoedgethefactory\client\tests; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_CLIENT; Tasks: 
Source: autoedgethefactory\client\resources\*.*; DestDir: {app}\autoedgethefactory\client\resources; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: AETF_CLIENT; Tasks: 

Source: autoedgethefactory\compile_loadinjectabl.p; DestDir: {app}\autoedgethefactory\; Flags: ignoreversion uninsremovereadonly;  Components: AETF_CLIENT AETF_SERVER
Source: autoedgethefactory\client\.project; DestDir: {app}\autoedgethefactory\client; Flags: ignoreversion uninsremovereadonly; Components: AETF_CLIENT
Source: autoedgethefactory\client\.propath; DestDir: {app}\autoedgethefactory\client; Flags: ignoreversion uninsremovereadonly; Components: AETF_CLIENT
Source: autoedgethefactory\client\assemblies.xml; DestDir: {app}\autoedgethefactory\client; Flags: ignoreversion uninsremovereadonly; Components: AETF_CLIENT
Source: autoedgethefactory\client\bin\load_injectabl_modules.r; DestDir: {app}\autoedgethefactory\client\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: AETF_CLIENT; Tasks: 
;server
Source: autoedgethefactory\server\cfg\*.*; DestDir: {app}\autoedgethefactory\server\cfg; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist;  Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\src\*.*; DestDir: {app}\autoedgethefactory\server\src; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\doc\*.*; DestDir: {app}\autoedgethefactory\server\doc; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\tests\*.*; DestDir: {app}\autoedgethefactory\server\tests; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\resources\*.*; DestDir: {app}\autoedgethefactory\server\resources; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\setup\*.*; DestDir: {app}\autoedgethefactory\server\setup; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_SERVER; Tasks: 

Source: autoedgethefactory\server\.propath; DestDir: {app}\autoedgethefactory\server; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER
Source: autoedgethefactory\server\.project; DestDir: {app}\autoedgethefactory\server; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER
Source: autoedgethefactory\server\.dbconnection; DestDir: {app}\autoedgethefactory\server; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER
Source: autoedgethefactory\server\bin\load_injectabl_modules.r; DestDir: {app}\autoedgethefactory\server\bin; Excludes: .svn; Flags: skipifsourcedoesntexist ignoreversion uninsremovereadonly; Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\db\*.df; DestDir: {app}\autoedgethefactory\server\db; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER; Tasks: 
Source: autoedgethefactory\server\db\autoedgethefactory.bup; DestDir: {app}\autoedgethefactory\server\db; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER; Tasks: 

;shared
Source: autoedgethefactory\shared\cfg\*.*; DestDir: {app}\autoedgethefactory\shared\cfg; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist;  Components: AETF_CLIENT AETF_SERVER; Tasks: 
Source: autoedgethefactory\shared\src\*.*; DestDir: {app}\autoedgethefactory\shared\src; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_CLIENT AETF_SERVER; Tasks: 
Source: autoedgethefactory\shared\doc\*.*; DestDir: {app}\autoedgethefactory\shared\doc; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: AETF_CLIENT AETF_SERVER; Tasks: 
Source: autoedgethefactory\shared\tests\*.*; DestDir: {app}\autoedgethefactory\shared\tests; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs skipifsourcedoesntexist;  Components: AETF_CLIENT AETF_SERVER; Tasks: 
Source: autoedgethefactory\shared\resources\*.*; DestDir: {app}\autoedgethefactory\shared\resources; Excludes: .svn,*.r,.*; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: AETF_CLIENT AETF_SERVER; Tasks: 

Source: autoedgethefactory\shared\bin\load_injectabl_modules.r; DestDir: {app}\autoedgethefactory\shared\bin; Excludes: .svn; Flags: skipifsourcedoesntexist ignoreversion uninsremovereadonly; Components: AETF_SERVER AETF_CLIENT; Tasks: 
Source: autoedgethefactory\shared\.propath; DestDir: {app}\autoedgethefactory\shared; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER AETF_CLIENT
Source: autoedgethefactory\shared\.project; DestDir: {app}\autoedgethefactory\shared; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER AETF_CLIENT

;Savvion
Source: autoedgethefactory\savvion\*.*; DestDir: {app}\autoedgethefactory\savvion; Excludes: ".svn, .metadata,*.com.savvion.studio"; Flags: ignoreversion uninsremovereadonly recursesubdirs createallsubdirs; Components: "AETF_CLIENT AETF_SERVER"; 

;OERA - BusinessComponents
Source: referencecomponents\businesscomponents\src\*.*; DestDir: {app}\referencecomponents\businesscomponents\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall recursesubdirs createallsubdirs; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\businesscomponents\tests\*.*; DestDir: {app}\referencecomponents\businesscomponents\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\businesscomponents\doc\*.*; DestDir: {app}\referencecomponents\businesscomponents\doc; Excludes: .svn; Flags: uninsneveruninstall recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\businesscomponents\resources\*.*; DestDir: {app}\referencecomponents\businesscomponents\resources; Excludes: .svn; Flags: uninsneveruninstall recursesubdirs createallsubdirs skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 

Source: referencecomponents\businesscomponents\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\businesscomponents\bin; Excludes: .svn; Flags: skipifsourcedoesntexist ignoreversion uninsremovereadonly; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\businesscomponents\.propath; DestDir: {app}\referencecomponents\businesscomponents; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_SERVER
Source: referencecomponents\businesscomponents\.project; DestDir: {app}\referencecomponents\businesscomponents; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_SERVER

;OERA - DataAccess
Source: referencecomponents\dataaccess\src\*.*; DestDir: {app}\referencecomponents\dataaccess\src; Excludes: .svn,*.r,.*; Flags: skipifsourcedoesntexist uninsneveruninstall recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\dataaccess\tests\*.*; DestDir: {app}\referencecomponents\dataaccess\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\dataaccess\doc\*.*; DestDir: {app}\referencecomponents\dataaccess\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\dataaccess\resources\*.*; DestDir: {app}\referencecomponents\dataaccess\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 

Source: referencecomponents\dataaccess\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\dataaccess\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\dataaccess\.propath; DestDir: {app}\referencecomponents\dataaccess; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER
Source: referencecomponents\dataaccess\.project; DestDir: {app}\referencecomponents\dataaccess; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER

;OERA - CommonInfrastructure
;server
Source: referencecomponents\commoninfrastructure\server\src\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\server\src; Excludes: .svn,*.r,.*; Flags: skipifsourcedoesntexist uninsneveruninstall recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\commoninfrastructure\server\tests\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\server\tests; Excludes: .svn,*.r,.*; Flags: skipifsourcedoesntexist uninsneveruninstall recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\commoninfrastructure\server\doc\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\server\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\commoninfrastructure\server\resources\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\server\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 

Source: referencecomponents\commoninfrastructure\server\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\commoninfrastructure\server\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER; Tasks: 
Source: referencecomponents\commoninfrastructure\server\.propath; DestDir: {app}\referencecomponents\commoninfrastructure\server; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER
Source: referencecomponents\commoninfrastructure\server\.project; DestDir: {app}\referencecomponents\commoninfrastructure\server; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER
;shared
Source: referencecomponents\commoninfrastructure\shared\src\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\shared\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\shared\tests\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\shared\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\shared\doc\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\shared\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\shared\resources\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\shared\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_SERVER OERA_CLIENT; Tasks: 

Source: referencecomponents\commoninfrastructure\shared\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\commoninfrastructure\shared\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\shared\.propath; DestDir: {app}\referencecomponents\commoninfrastructure\shared; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_SERVER OERA_CLIENT
Source: referencecomponents\commoninfrastructure\shared\.project; DestDir: {app}\referencecomponents\commoninfrastructure\shared; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_SERVER OERA_CLIENT
;client
Source: referencecomponents\commoninfrastructure\client\src\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\client\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\client\tests\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\client\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\client\doc\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\client\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\client\resources\*.*; DestDir: {app}\referencecomponents\commoninfrastructure\client\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_CLIENT; Tasks: 

Source: referencecomponents\commoninfrastructure\client\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\commoninfrastructure\client\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\commoninfrastructure\client\.propath; DestDir: {app}\referencecomponents\commoninfrastructure\client; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT
Source: referencecomponents\commoninfrastructure\client\.project; DestDir: {app}\referencecomponents\commoninfrastructure\client; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT

;OERA - EnterpriseServices
Source: referencecomponents\enterpriseservices\src\*.*; DestDir: {app}\referencecomponents\enterpriseservices\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\enterpriseservices\tests\*.*; DestDir: {app}\referencecomponents\enterpriseservices\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\enterpriseservices\doc\*.*; DestDir: {app}\referencecomponents\enterpriseservices\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\enterpriseservices\resources\*.*; DestDir: {app}\referencecomponents\enterpriseservices\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_SERVER OERA_CLIENT; Tasks: 

Source: referencecomponents\enterpriseservices\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\enterpriseservices\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: OERA_SERVER OERA_CLIENT; Tasks: 
Source: referencecomponents\enterpriseservices\.propath; DestDir: {app}\referencecomponents\enterpriseservices; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT  OERA_SERVER
Source: referencecomponents\enterpriseservices\.project; DestDir: {app}\referencecomponents\enterpriseservices; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT OERA_SERVER

;OERA - PresentationLayer
Source: referencecomponents\presentationlayer\src\*.*; DestDir: {app}\referencecomponents\presentationlayer\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\presentationlayer\tests\*.*; DestDir: {app}\referencecomponents\presentationlayer\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\presentationlayer\doc\*.*; DestDir: {app}\referencecomponents\presentationlayer\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\presentationlayer\resources\*.*; DestDir: {app}\referencecomponents\presentationlayer\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: OERA_CLIENT; Tasks: 

Source: referencecomponents\presentationlayer\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\presentationlayer\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT; Tasks: 
Source: referencecomponents\presentationlayer\.propath; DestDir: {app}\referencecomponents\presentationlayer; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT
Source: referencecomponents\presentationlayer\.project; DestDir: {app}\referencecomponents\presentationlayer; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT
Source: referencecomponents\presentationlayer\assemblies.xml; DestDir: {app}\referencecomponents\presentationlayer; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: OERA_CLIENT

;Support
Source: referencecomponents\support\src\*.*; DestDir: {app}\referencecomponents\support\src; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: ; Tasks: 
Source: referencecomponents\support\tests\*.*; DestDir: {app}\referencecomponents\support\tests; Excludes: .svn,*.r,.*; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: ; Tasks: 
Source: referencecomponents\support\doc\*.*; DestDir: {app}\referencecomponents\support\doc; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist recursesubdirs createallsubdirs ; Components: ; Tasks: 
Source: referencecomponents\support\resources\*.*; DestDir: {app}\referencecomponents\support\resources; Excludes: .svn; Flags: uninsneveruninstall skipifsourcedoesntexist; Components: ; Tasks: 

Source: referencecomponents\support\bin\load_injectabl_modules.r; DestDir: {app}\referencecomponents\support\bin; Excludes: .svn; Flags: ignoreversion uninsremovereadonly skipifsourcedoesntexist; Components: ; Tasks: 
Source: referencecomponents\support\.propath; DestDir: {app}\referencecomponents\support; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: 
Source: referencecomponents\support\.project; DestDir: {app}\referencecomponents\support; Excludes: .svn; Flags: ignoreversion uninsremovereadonly; Components: 

; Setup
Source: installer\include\startdbs.ico; DestDir: {app}\autoedgethefactory\server\cfg; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER
Source: installer\include\stopdbs.ico; DestDir: {app}\autoedgethefactory\server\cfg; Flags: ignoreversion uninsremovereadonly; Components: AETF_SERVER

[Icons]
Name: {app}\AutoDox2 doc-comments; Filename: {app}\autodox2-index.html; WorkingDir: {app}; Comment: AutoDox2 Developer documentation
Name: {app}\Project Page on Progress Communities; Filename: http://communities.progress.com/pcom/community/psdn/openedge/architecture/autoedgethefactory; WorkingDir: {app}; IconFilename: {app}\autoedgethefactory\shared\cfg\aetf.ico; Components: 

;servers
Name: {group}\AutoEdge\Factory Module\{cm:UninstallProgram,AutoEdge}; Filename: {uninstallexe}; Components: 
Name: {group}\AutoEdge\Factory Module\Server\Start All Processes; Filename: {app}\autoedgethefactory\server\cfg\StartAll.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\startdbs.ico; IconIndex: 0; Components: AETF_SERVER
Name: {group}\AutoEdge\Factory Module\Server\Start Database Servers; Filename: {app}\autoedgethefactory\server\cfg\StartDatabases.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\startdbs.ico; IconIndex: 0; Components: AETF_SERVER
Name: {group}\AutoEdge\Factory Module\Server\Start AppServers; Filename: {app}\autoedgethefactory\server\cfg\StartAppServers.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\startdbs.ico; IconIndex: 0; Components: AETF_SERVER
Name: {group}\AutoEdge\Factory Module\Server\Stop All Processes; Filename: {app}\autoedgethefactory\server\cfg\StopAll.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\stopdbs.ico; IconIndex: 0; Components: AETF_SERVER
Name: {group}\AutoEdge\Factory Module\Server\Stop Database Servers; Filename: {app}\autoedgethefactory\server\cfg\StopDatabases.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\stopdbs.ico; IconIndex: 0; Components: AETF_SERVER
Name: {group}\AutoEdge\Factory Module\Server\Stop AppServers; Filename: {app}\autoedgethefactory\server\cfg\StopAppServers.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; IconFilename: {app}\autoedgethefactory\server\cfg\stopdbs.ico; IconIndex: 0; Components: AETF_SERVER
;devenv
Name: {group}\AutoEdge\Factory Module\Development Environment(OpenEdge Architect); Filename: {code:getDLCDirectory}\oeide\eclipse\eclipse.exe; Parameters: """-showlocation -vm "" ""{code:getDLCDirectory}\jre\bin\javaw.exe"""""; WorkingDir: {app}; Comment: AutoEdge|TheFactory OpenEdge Architect; IconFilename: {app}\autoedgethefactory\shared\cfg\aetf.ico; IconIndex: 0; Components: 
;runtime
Name: {group}\AutoEdge\Factory Module\Client\Dealer Review GUI; Filename: {code:getDLCDirectory}\bin\prowin32.exe; Parameters: "-pf ""autoedgethefactory\client\cfg\client.pf"" -basekey INI -ininame ""autoedgethefactory\client\cfg\client.ini"" -p start_ui.p "; WorkingDir: {app}; Comment: AutoEdge|TheFactory Dealer Review GUI; IconFilename: {app}\autoedgethefactory\shared\resources\aetf.ico; IconIndex: 0; Components: AETF_CLIENT; Tasks: 

[Components]
Name: AETF_SERVER; Description: AutoEdge|TheFactory Server Components; Flags: checkablealone; Types: custom compact full
Name: AETF_CLIENT; Description: AutoEdge|TheFactory Client Components; Flags: checkablealone; Types: custom compact full
Name: OERA_SERVER; Description: OERA Server Components; Flags: checkablealone; Types: custom compact full
Name: OERA_CLIENT; Description: OERA Client Components; Flags: checkablealone; Types: custom compact full
Name: SUPPORT; Description: General Support Libraries; Flags: checkablealone; Types: custom compact full

[_ISTool]
UseAbsolutePaths=false
LogFile={src}\installer\output\compile.log
LogFileAppend=false
[UninstallRun]
Filename: {app}\autoedgethefactory\server\cfg\StopAll.cmd; WorkingDir: {app}\autoedgethefactory\server\cfg; Components: AETF_SERVER

[Code]
{ === CODE Section for AutoEdge|TheFactory Setup IIS ======================== }
{ =																			= }
{ =		InnoSetup Script code part for installing the AutoEdge|TheFactory   = }
{ =		application															= }
{ =																			= }
{ =		Created:	Jan 2011; based on AutoEdge Dealership setup files		= }
{ =		Author: 	Peter Judge, pjudge@progress.com						= }
{ =																			= }
{ =========================================================================== }

{ === Include the Custom Wizard Pages and support code for them. ============ }

#include "include\wizardpages\adminports.inc"
#include "include\wizardpages\asbrokerports.inc"
#include "include\wizardpages\dbbrokerports.inc"
#include "include\wizardpages\hostname.inc"
#include "include\wizardpages\openedgerelease.inc"

{ =========================================================================== }

const
	numControls = 2;

var
	bShowDebugMsg				: boolean;		// This controls debug messages
	strLogFilename				: string;
	strDLCDirectory				: string;
	iAdminServerPortPageID		: integer;
	iDBBrokerPortsPageID		: integer;
	iASBrokerPortsPageID		: integer;
	iHostnamePageID				: integer;
	iOpenEdgeReleaseID			: integer;
	strMinDLCMajor				: string;
	intMinDLCMinor				: integer;

{ Show Debug messages }
procedure DebugMsg( s : string );
begin
	if bShowDebugMsg then
		MsgBox( s, mbInformation, MB_OK );

	Log(s);
end;

{	Return the strDLCDirectory value }
function getDLCDirectory( str : string ) : string;
begin
	Result := strDLCDirectory;
end;

{ 	Return the CLASSPATH value }
function getClassPath( str : string ) : string;
begin
	Result := GetEnv( 'CLASSPATH' );
end;

{ === FUNCTION setDLCDirectory ========================================================== }
{ =																						= }
{ =		Function to set the DLC value of the installed OpenEdge release or the one		= }
{ =		selected by the user during the install.										= }
{ =																						= }
{ ======================================================================================= }

function setDLCDirectory() : boolean;
var
	strKey	 : string;
	strValue : string;
	intValue : longint;
	DLCVersions: TArrayOfString;
	iLoop: integer;
	intLenDLC: integer;
	strVersion: String;
begin
	DebugMsg( 'setDLCDirectory()' );

	{ If the OpenEdgeVesion variable is set to anything sensible we will	}
	{ have to use that as it is the OpenEdge version the user selected.		}
    if Length( OpenEdgeVersion ) > 0 then
    begin
		strMinDLCMajor := OpenEdgeVersion;
		intMinDLCMinor := 0;
	end;

	Result := false;

	{ ServicePack version installed can be found in registry:				}
	{ HKEY_LOCAL_MACHINE\SOFTWARE\PSC\PROGRESS\<Version>\ServicePack\Level	}

	{ Maybe we have a Beta or some other pre-release installed? If so we    }
	{ will pick up the latest release if more versions are installed on the }
	{ machine.																}
	RegGetSubkeyNames(HKLM, 'Software\PSC\PROGRESS', DLCVersions);

	strVersion := '';
	intLenDLC := Length(strMinDLCMajor);
	for iLoop := 0 to GetArrayLength(DLCVersions)-1 do
	begin
		strValue := Copy(DLCVersions[iLoop], 0, intLenDLC);
		if strValue = strMinDLCMajor then
		begin
			strVersion := DLCVersions[iLoop];
			{ Gets us outta here }
			iLoop := GetArrayLength(DLCVersions);
		end;
	end;

	DebugMsg(' using = ' + strVersion);

	{ Get the location of DLC commands }
	if RegQueryStringValue( HKLM, 'Software\PSC\PROGRESS\' + strVersion + '\Startup', 'DLC', strValue ) then
	begin
		strDLCDirectory := strValue;
		Result := true;
	end;

	{If a minimum service pack is specified, check that it's installed }
	if intMinDLCMinor > 0 then
	begin
		if RegKeyExists(HKLM, 'Software\PSC\Progress\' + strVersion + '\ServicePack' ) then
		begin
			RegQueryStringValue( HKLM, 'Software\PSC\PROGRESS\' + strVersion + '\ServicePack', 'Level', strValue );
			if StrToInt(strValue) = intMinDLCMinor then
				Result := true;
		end;
	end;

	if Result = true then
		DebugMsg('using DLC ' + strVersion + ' SP ' + IntToStr(intMinDLCMinor) );
end;

{ === PROCEDURE writeLogEntry =========================================================== }
{ =																						= }
{ =		Procedure which takes care of writing entries in a setup log file for later		= }
{ =		reviewing.																		= }
{ =																						= }
{ ======================================================================================= }

procedure writeLogEntry( const s : string );
begin
	SaveStringToFile( strLogFilename, s, true );
end;

{ === FUNCTION InitializeSetup ========================================================== }
{ =																						= }
{ =		Event procedure for initializing the setup wizard								= }
{ =																						= }
{ =		This function gets called when the setup initializes. This is where we want to	= }
{ =		grab initial values and other things we need to do the setup.					= }
{ =																						= }
{ ======================================================================================= }

function InitializeSetup() : boolean;
begin
	bShowDebugMsg := false;		// Setting this to TRUE will enable debug messages!
//	bShowDebugMsg := true;		// Setting this to FALSE will disable debug messages!
	Result        := true;
	strMinDLCMajor := '10.2B';
	intMinDLCMinor := 0;	// not always used: use 0 when not in use

	DebugMsg( 'Running InitializeSetup()' );

	{ Initialize logging }

	{	Get the PROGRESS DLC Information }
	{ If this check fails, we have to bail since there is nothing left to 	}
	{	do really when PROGRESS is not installed.							}

//  if not setDLCDirectory() then
//  begin
//		MsgBox( 'This version of AutoEdge requires OpenEdge ' + strMinDLCMajor + ' or higher', mbError, MB_OK );
//		Result := false;
//	end
//	else

end;

{ === PROCEDURE CreateCustomWizardPages ================================================= }
{ =																						= }
{ =		Procedure for creating the new custom wizard pages								= }
{ =																						= }
{ ======================================================================================= }

procedure CreateCustomWizardPages;
begin
	DebugMsg( 'Running CreateCustomWizardPages()' );

	{ === Add out own custom pages to the setup wizard === }

	{ OpenEdge Release to use for this installation }
	iOpenEdgeReleaseID := OpenEdgeRelease_CreatePage( wpSelectComponents );

	{ Progress AdminServer Port Page }
	iAdminServerPortPageID := AdminPort_CreatePage( iOpenEdgeReleaseID );

	{ Progress Database Broker Ports Page }
	iDBBrokerPortsPageID := DBBrokerPorts_CreatePage( iAdminServerPortPageID );

	{ Progress AppServer Broker Ports Page }
	iASBrokerPortsPageID := ASBrokerPorts_CreatePage( iDBBrokerPortsPageID );


end;

{ === PROCEDURE BtnAboutOnClick ========================================================= }
{ =																						= }
{ =		Event Handler Procedure for Click on About Button								= }
{ =																						= }
{ ======================================================================================= }

procedure BtnAboutOnClick( Sender : TObject );
var
	Path 		: string;
	MsgAbout	: string;
	FreeMB 		: cardinal;
	TotalMB 	: cardinal;
begin
	{ Get and display free megabytes on the Program Files drive }
	MsgAbout	:= 'AutoEdge|TheFactory Setup Version 1.0';
	Path 		:= ExpandConstant('{pf}');

	if GetSpaceOnDisk(Path, True, FreeMB, TotalMB) then
	begin
		MsgAbout := MsgAbout + #13#10#13#10 + 'There are ' + IntToStr(FreeMB) + ' megabytes free on ' + Path;
	end;

	MsgBox( MsgAbout, mbInformation, MB_OK );
end;

{ === PROCEDURE LabelURLOnClick ========================================================= }
{ =																						= }
{ =		Event Handler Procedure for Click on URL Label									= }
{ =																						= }
{ ======================================================================================= }

procedure LabelURLOnClick( Sender : TObject );
var
	ErrorCode : Integer;
begin
	ShellExec( 'open', 'http://web.progress.com/index.ssp', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode );
end;

{ === PROCEDURE InitializeWizard ======================================================== }
{ =																						= }
{ =		Setup Wizard Initialization Procedure											= }
{ =																						= }
{ =		This procedure will create custom wizard pages (such as the broker ports page)	= }
{ =		and put them into the setup sequence at the wanted place (after the welcome		= }
{ =		page for example).																= }
{ =																						= }
{ =		This procedure is an event handler and will be called by the Inno Setup			= }
{ =		Utility.																		= }
{ =																						= }
{ ======================================================================================= }

procedure InitializeWizard();
var
	btnAbout	: TButton;
	btnCancel 	: TButton;
	lblURL 		: TNewStaticText;
begin
	DebugMsg( 'Running InitializeWizard()' );

	{ Create the custom wizard pages }
	CreateCustomWizardPages();

	{ Put the rest of the custom controls on }
	btnCancel := WizardForm.CancelButton;

	{ The About Button }
	btnAbout			:= TButton.Create( WizardForm );
	btnAbout.Left		:= WizardForm.ClientWidth - btnCancel.Left - btnCancel.Width;
	btnAbout.Top		:= btnCancel.Top;
	btnAbout.Width		:= btnCancel.Width;
	btnAbout.Height		:= btnCancel.Height;
	btnAbout.Caption	:= '&About...';
	btnAbout.OnClick	:= @BtnAboutOnClick;
	btnAbout.Parent		:= WizardForm;

	{ The URL Label }
	lblURL 				:= TNewStaticText.Create( WizardForm );
	lblURL.Caption		:= 'web.progress.com';
	lblURL.Cursor		:= crHand;
	lblURL.OnClick		:= @LabelURLOnClick;
	lblURL.Parent		:= WizardForm;
	lblURL.Font.Style	:= lblURL.Font.Style + [fsUnderline];
	lblURL.Font.Color	:= clBlue;
	lblURL.Top 			:= btnAbout.Top + btnAbout.Height - lblURL.Height - 2;
	lblURL.Left 		:= btnAbout.Left + btnAbout.Width + ScaleX( 20 );

end;

{ === PROCEDURE DoProstructRepair ======================================================= }
{ =																						= }
{ =		Run a PROSTRCT REPAIR session on the database to make it fit the new directory	= }
{ =																						= }
{ ======================================================================================= }

procedure DoProstructRepair( strDatabase : string );
var
	ret		: integer;
	bRet	: boolean;
	strCmd	: string;
begin
	Debugmsg( 'Repairing Database Structure [ ' + strDatabase + ' ]' );

	{ Create the PROSTRCT command }
	strCmd := strDLCDirectory + '\bin\prostrct.bat';

	bRet := Exec( strCmd ,
				  'repair ' + strDatabase,
				  ExpandConstant( '{app}' ),
				  SW_HIDE,
				  ewWaitUntilTerminated,
				  ret );

	if not bRet then
		MsgBox( 'Return code: ' + SysErrorMessage( ret ), mbInformation, MB_OK );
end;

{ === PROCEDURE DoProRestore ============================================================ }
{ =																						= }
{ =		Run a PROREST session on the given database to restore it into new directory.	= }
{ =																						= }
{ ======================================================================================= }

procedure DoProRestore( strTarget, strSource, strDirectory : string );
var
	ret		: integer;
	bRet	: boolean;
	strCmd	: string;
begin
	DebugMsg( 'Restoring Database [ ' + strTarget + ' ]' + ' from ' + strSource);

	{ Create the PROREST command }
	strCmd := strDLCDirectory + '\bin\prorest.bat';

	bRet := Exec( strCmd ,
				  '"' + strTarget + '" "' + strSource + '"',
				  strDirectory,
				  SW_HIDE,
				  ewWaitUntilTerminated,
				  ret );

	if not bRet then
		MsgBox( 'Return code: ' + intToStr( ret ) + ' [ ' + SysErrorMessage( ret ) + ' ]', mbInformation, MB_OK );
end;

procedure DoMergeProperties( strAction, strPropertyType, strTarget, strSource, strDirectory : string );
var
	ret		: integer;
	bRet	: boolean;
	strCmd	: string;
begin
	DebugMsg( 'Mergine properties from [ ' + strTarget + ' ]' );
	{ mergeprop <parameter> ...
	<parameter>:
		  -action <list|listall> <property group>
					or
		  -action <update|create|delete>
		  -delta  <file>
		  -type   <database|ubroker|plugin|tools|none>
		  -target <file>
		  -validate
		  -nobackup
		  -recurse  (-type database only)
		  -silent		}

	{ Create the PROREST command }
	strCmd := strDLCDirectory + '\bin\mergeprop.bat';

	bRet := Exec( strCmd ,
			     ' -action ' + strAction + ' -delta "' + strSource + '" -target "' + strTarget + '" -type ' + strPropertyType,
				  strDirectory,
				  SW_HIDE,
				  ewWaitUntilTerminated,
				  ret );

	if not bRet then
		MsgBox( 'Return code: ' + intToStr( ret ) + ' [ ' + SysErrorMessage( ret ) + ' ]', mbInformation, MB_OK );
end;


{ === PROCEDURE DoUpdateConfigFiles ===================================================== }
{ =																						= }
{ =		Make changes to the configuration files to reflect the new directory where		= }
{ =		the AutoEdge App will be put. The config files are shortcuts, Progress PF		= }
{ =		files and the likes.															= }
{ =																						= }
{ ======================================================================================= }

procedure DoUpdateConfigFiles;
var
	FileName, Propath, FileBody	: string;
begin
	DebugMsg( 'Updating Configuration Files' );

	{ === Create the necessary PF files === }

	{ Server only }
	if isComponentSelected( 'AETF_SERVER' ) then
	begin
		DebugMsg( 'Creating Server command files' );

		{ Create the autoedge-hq-db.pf file }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\server.pf' );
		SaveStringToFile( FileName,
						  '# AutoEdge|TheFactory Database Connection' 	          + #13#10 +
						  '-pf ./autoedgethefactory/shared/cfg/shared.pf' 				+ #13#10 +
						  '-db ./autoedgethefactory/server/db/aetf.db -ld aetf'		+ #13#10 +
						  '-T  ./autoedgethefactory/server/temp'									+ #13#10 +
						  '# eof' 										                            + #13#10,
						  false );

		{ === StartDatabases.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StartDatabases.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "%DLC%\bin\dbman.bat" -db dbAutoEdgeTheFactory -start -port ' + txtAdminServerPort.Text + #13#10 ,
						  false );

		{ === StopDatabases.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StopDatabases.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "%DLC%\bin\dbman.bat" -db dbAutoEdgeTheFactory -stop -port ' + txtAdminServerPort.Text + #13#10 ,
						  false );

		{ === StartAppservers.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StartAppservers.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "%DLC%\bin\asbman.bat" -i asAutoEdgeTheFactory -start -port ' + txtAdminServerPort.Text + #13#10,
						  false );

		{ === StopAppservers.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StopAppservers.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "%DLC%\bin\asbman.bat" -i asAutoEdgeTheFactory -stop -port ' + txtAdminServerPort.Text + #13#10,
						  false );

		{ === StartAll.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StartAll.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "' + ExpandConstant( '{app}\autoedgethefactory\server\cfg\StartDatabases.cmd' ) + '" ' + #13#10#13#10 +
						  'CALL "' + ExpandConstant( '{app}\autoedgethefactory\server\cfg\StartAppservers.cmd' ) + '" ' + #13#10#13#10,
						  false );

		{ === StopAll.cmd === }
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\StopAll.cmd' );

		{ Put the body in }
		SaveStringToFile( FileName,
						  '@ECHO OFF' + #13#10 +
						  'SET DLC=' + strDLCDirectory + #13#10 +
						  'SET PATH=%DLC%\bin;%PATH%' + #13#10#13#10 +
						  'REM' + #13#10#13#10 +
						  'CALL "' + ExpandConstant( '{app}\autoedgethefactory\server\cfg\StopDatabases.cmd' ) + '" ' + #13#10#13#10 +
						  'CALL "' + ExpandConstant( '{app}\autoedgethefactory\server\cfg\StioAppservers.cmd' ) + '" ' + #13#10#13#10,
						  false );
	end;

	{ Progress GUI Client only }
	if isComponentSelected( 'AETF_CLIENT' ) then
	begin
		DebugMsg( 'Creating Factory Client config files' );

		FileName := ExpandConstant( '{app}\autoedgethefactory\client\cfg\client.pf' );
		SaveStringToFile( FileName,
						  '# PF for AutoEdge|TheFactory Client session'             + #13#10 +
						  '-pf  ./autoedgethefactory/shared/cfg/shared.pf ' 				+ #13#10 +
						  '-T   ./autoedgethefactory/client/temp ' 									+ #13#10 +						  
						  '-assemblies ./autoedgethefactory/client '                + #13#10,
						  false );
						  
		FileName := ExpandConstant( '{app}\autoedgethefactory\client\cfg\client.ini' );
		SetIniString( 'Startup', 'DLC', strDLCDirectory, FileName );			
		Propath := ExpandConstant('.\autoedgethefactory\client\bin,.\autoedgethefactory\shared\bin,.\referencecomponents\presentationlayer\bin,.\referencecomponents\enterpriseservices\bin,.\referencecomponents\commoninfrastructure\client\bin,.\referencecomponents\commoninfrastructure\shared\bin,.\referencecomponents\support\bin,.\autoedgethefactory\client\src,.\autoedgethefactory\shared\src,.\referencecomponents\presentationlayer\src,.\referencecomponents\enterpriseservices\src,.\referencecomponents\commoninfrastructure\client\src,.\referencecomponents\commoninfrastructure\shared\src,.\referencecomponents\support\src,.\autoedgethefactory\client\tests,.\autoedgethefactory\shared\tests,{code:getDLCDirectory}\gui,{code:getDLCDirectory},{code:getDLCDirectory}\bin');   						  
		SetIniString( 'Startup', 'PROPATH', Propath, FileName );
		
		SetIniString( 'WinCharStartup', 'DLC', strDLCDirectory, FileName );
		Propath := ExpandConstant('.,{code:getDLCDirectory}\tty,{code:getDLCDirectory},{code:getDLCDirectory}\bin');   						  
		SetIniString( 'WinCharStartup', 'PROPATH', Propath, FileName );
   end;

end;

{ === PROCEDURE DoAddDatabase2ConmgrFile ================================================ }
{ =																						= }
{ =		Add the required database to the conmgr.properties file.						= }
{ =																						= }
{ ======================================================================================= }

procedure DoAddDatabase2ConmgrFile( PropFileName, EntryName, DisplayName, DatabaseFilename, Port : string );
var
	Section		: string;
begin
	{ Create the EntryName database entries }
	Section := 'database.' + EntryName;
	if not IniKeyExists( Section, 'displayname', PropFileName) then
	begin
		DebugMsg( 'Creating ' + EntryName + ' entries' );
		
		{ Write the [database.EntryName] keys }
		SetIniString( Section, 'configurations', EntryName + '.defaultconfiguration', PropFileName );
		SetIniString( Section, 'databasename', DatabaseFilename, PropFileName );
		SetIniString( Section, 'defaultconfiguration', EntryName + '.defaultconfiguration', PropFileName );
		SetIniString( Section, 'displayname', DisplayName, PropFileName );

		{ Write the [configuration.EntryName.defaultconfiguration] keys }
		Section := 'configuration.' + EntryName + '.defaultconfiguration';
		SetIniString( Section, 'asynchronouspagewriters', '0', PropFileName );
		SetIniString( Section, 'beforeimageprocess', 'false', PropFileName );
		SetIniString( Section, 'database', EntryName, PropFileName );
		SetIniString( Section, 'displayname', 'defaultConfiguration', PropFileName );
		SetIniString( Section, 'servergroups', EntryName + '.defaultconfiguration.defaultservergroup', PropFileName );
		SetIniString( Section, 'watchdogprocess', 'false', PropFileName );

		{ Write the [servergroup.EntryName.defaultconfiguration.defaultservergroup] keys }
		Section := 'servergroup.' + EntryName + '.defaultconfiguration.defaultservergroup';
		SetIniString( Section, 'configuration', EntryName + '.defaultconfiguration', PropFileName );
		SetIniString( Section, 'displayname', 'defaultServerGroup', PropFileName );
		SetIniString( Section, 'port', Port, PropFileName );
	end;
end;

{ === PROCEDURE DoUpdateConmgrPropertiesFile ============================================ }
{ =																						= }
{ =		Add the required databases to the conmgr.properties file.						= }
{ =																						= }
{ ======================================================================================= }

procedure DoUpdateConmgrPropertiesFile;
var
	FileName	: string;
begin
	if isComponentSelected( 'AETF_SERVER' ) then
	begin
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\aetf.conmgr.properties' );
		
		{ Make sure the file exists (it shouldn't, so create) } 
		SaveStringToFile(FileName, '', false);

		{ === AutoEdge|TheFactory ======================================================== }
		DoAddDatabase2ConmgrFile( FileName,
								  'dbAutoEdgeTheFactory',
								  'dbAutoEdgeTheFactory',
								  ExpandConstant( '{app}\autoedgethefactory\server\db\aetf.db' ),
								  txtDBAutoEdgeFactory.Text );

		{ merge to installed properties file in DLC }
		DoMergeProperties('update',
						  'database',
						  ExpandConstant('{code:getDLCDirectory}\properties\conmgr.properties'),
						  FileName,
						  ExpandConstant('{app}\autoedgethefactory\server'));
	end;
end;

{ === PROCEDURE DoAddBroker2UBrokerFile ================================================= }
{ =																						= }
{ =		Add the required broker to the ubroker.properties file.							= }
{ =																						= }
{ ======================================================================================= }

procedure DoAddBroker2UBrokerFile( PropFileName, Section, EntryName, OpMode, Port, Propath, Startup, UUID, WorkDir : string );
begin
	if not IniKeyExists( Section, 'appserviceNameList', PropFileName) then
	begin
		DebugMsg( 'Creating ' + EntryName + ' entries' );

		SetIniString( Section, 'appserviceNameList', EntryName, PropFileName );
		SetIniString( Section, 'brkrLogAppend', '0', PropFileName );
		SetIniString( Section, 'brkrLoggingLevel', '3', PropFileName );
		SetIniString( Section, 'brokerLogFile', ExpandConstant( '{app}' ) + '\autoedgethefactory\server\logs\' + EntryName + '.broker.log', PropFileName );
		SetIniString( Section, 'controllingNameServer', 'NS1', PropFileName );
		SetIniString( Section, 'initialSrvrInstance', '1', PropFileName );
		SetIniString( Section, 'keyAlias', 'default_server', PropFileName );
		SetIniString( Section, 'operatingMode', OpMode, PropFileName );
		SetIniString( Section, 'portNumber', Port, PropFileName );
		SetIniString( Section, 'PROPATH', ProPath, PropFileName );
		SetIniString( Section, 'srvrLogAppend', '0', PropFileName );
		SetIniString( Section, 'srvrLogFile', ExpandConstant( '{app}' ) + '\autoedgethefactory\server\logs\' + EntryName + '.server.log', PropFileName );
		SetIniString( Section, 'srvrMaxPort', txtMaxPort.Text, PropFileName );
		SetIniString( Section, 'srvrMinPort', txtMinPort.Text, PropFileName );
		SetIniString( Section, 'srvrStartupParam', Startup, PropFileName );
		SetIniString( Section, 'uuid', UUID, PropFileName );
		SetIniString( Section, 'workDir', WorkDir, PropFileName );
	end;
end;

{ === PROCEDURE DoUpdateUBrokerPropertiesFile =========================================== }
{ =																						= }
{ =		Add the required brokers to the ubroker.properties file.						= }
{ =																						= }
{ ======================================================================================= }

procedure DoUpdateUBrokerPropertiesFile();
var
	FileName	: string;
	Section		: string;
begin
	if isComponentSelected( 'AETF_SERVER' ) then
	begin
		FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\aetf.ubroker.properties' );
    Section := 'UBroker.AS.asAutoEdgeTheFactory';
     
		{ Make sure the file exists (it shouldn't, so create) }
		SaveStringToFile(FileName, '', false);
		
		{ Add the asAutoEdgeHQ AppServer }
		DoAddBroker2UBrokerFile(
		            FileName,
								Section,
								'asAutoEdgeTheFactory',
								'State-free',
								txtASAutoEdgeFactory.Text,								
                ExpandConstant('./autoedgethefactory/server/bin;./autoedgethefactory/shared/bin;./referencecomponents/businesscomponents/bin;./referencecomponents/dataaccess/bin;./referencecomponents/enterpriseservices/bin;./referencecomponents/commoninfrastructure/server/bin;./referencecomponents/commoninfrastructure/shared/bin;./referencecomponents/support/bin;./autoedgethefactory/server/src;./autoedgethefactory/shared/src;./referencecomponents/businesscomponents/src;./referencecomponents/dataaccess/src;./referencecomponents/enterpriseservices/src;./referencecomponents/commoninfrastructure/server/src;./referencecomponents/commoninfrastructure/shared/src;./referencecomponents/support/src;./autoedgethefactory/server/tests;./autoedgethefactory/shared/tests;{code:getDLCDirectory};{code:getDLCDirectory}/bin'),
								'-pf ./autoedgethefactory/server/cfg/server.pf',
                '9ac3e995eba6ce0d:46471e5:12ddf173a65:-8000',
								ExpandConstant( '{app}' ));

		{ Add the startup procedures }
		SetIniString(Section, 'srvrActivateProc', 'OpenEdge/CommonInfrastructure/Server/as_activate.p', FileName );
		SetIniString(Section, 'srvrConnectProc', 'OpenEdge/CommonInfrastructure/Server/as_connect.p', FileName );
		SetIniString(Section, 'srvrDeactivateProc', 'OpenEdge/CommonInfrastructure/Server/as_deactivate.p', FileName );
		SetIniString(Section, 'srvrDisconnProc', 'OpenEdge/CommonInfrastructure/Server/as_disconnect.p', FileName );
		SetIniString(Section, 'srvrShutdownProc', 'OpenEdge/CommonInfrastructure/Server/as_shutdown.p', FileName );
		SetIniString(Section, 'srvrStartupProc', 'OpenEdge/CommonInfrastructure/Server/as_startup.p', FileName );
		
		{ merge to installed properties file in DLC }
		DoMergeProperties('update',
						  'ubroker',
						  ExpandConstant('{code:getDLCDirectory}\properties\ubroker.properties'),
						  FileName,
						  ExpandConstant('{app}\autoedgethefactory\server'));

    { WSA properties for WebServices }
    FileName := ExpandConstant( '{app}\autoedgethefactory\server\cfg\wsa1.ubroker.properties' );
    Section := 'WSA.wsa1';
    
		{ Make sure the file exists (it shouldn't, so create) }
		SaveStringToFile(FileName, '', false);
		
		SetIniString(Section, 'adminAuth', '0', FileName );
		SetIniString(Section, 'adminEnabled', '1', FileName );
    SetIniString(Section, 'location', 'local', FileName );
		SetIniString(Section, 'logAppend', '0', FileName );
    SetIniString(Section, 'logFile', ExpandConstant( '{app}' ) + '\autoedgethefactory\server\logs\wsa1.wsa.log', FileName );
    SetIniString(Section, 'loggingLevel', '2', FileName );
		SetIniString(Section, 'webAppEnabled', '1', FileName );
		SetIniString(Section, 'webServerAuth', '0', FileName );
		SetIniString(Section, 'workDir', ExpandConstant( '{app}' ) + '\autoedgethefactory\server', FileName );
		SetIniString(Section, 'wsaUrl', 'http://localhost:8080/wsa/wsa1', FileName );
		
//   No wsa merge since we want to keep the original. probably. 
//		{ merge to installed properties file in DLC }  
//		DoMergeProperties('update',
//						  'ubroker',
//						  ExpandConstant('{code:getDLCDirectory}\properties\ubroker.properties'),
//						  FileName,
//						  ExpandConstant('{app}\autoedgethefactory\server'));						  						  

	end;
end;

{ === PROCEDURE DoUpdatePropertyFiles =================================================== }
{ =																						= }
{ =		Make changes to the Progress Property files and put in the new services.		= }
{ =		These are the WebSpeed, AppServer and Database services. The broker port		= }
{ =		numbers are taken from the PortsPage.											= }
{ =																						= }
{ ======================================================================================= }

procedure DoUpdatePropertyFiles;
begin
	DebugMsg( 'Updating Progress Properties Files' );

	{ Update the conmgr.properties file }
	DoUpdateConmgrPropertiesFile();

	{ Update the ubroker.properties file }
	DoUpdateUBrokerPropertiesFile();
end;

{ === PROCEDURE PopulateDatabase ======================================================== }
{ =																						= }
{ =		Populate the databases using a 4GL procedure									= }
{ =																						= }
{ ======================================================================================= }

procedure PopulateDatabase;
var
	strCmd		: string;
	strParam	: string;
	strBase		: string;
	ret			: integer;
begin
	DebugMsg( 'Populating AutoEdge Databases' );

	{ Create the command line to run the database creation procedures }

	strCmd	:= strDLCDirectory + '\bin\_progres.exe';
	strBase	:= '-p "' + ExpandConstant( '{app}\autoedge\dealer\src\server\test\setupdata.p' ) + '" ' +
			   '-basekey INI -ininame "' + ExpandConstant( '{app}\autoedge-local\dealer\cfg\autoedge-gui.ini' ) + '"';

	{ Configure the Dealer 01 databases }
	strParam := '-param "ID=Dealer01" ' +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\autoedge01.db -ld autoedge -1 ' ) +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\oerpcore01.db -ld oerpcore -1 ' ) +
				strBase;

	DebugMsg( 'Running: ' + strCmd + ' ' + strParam );

	if not Exec( strCmd , strParam, ExpandConstant( '{app}' ), SW_HIDE, ewWaitUntilTerminated, ret ) then
	begin
		MsgBox( 'Data load failed: ' + SysErrorMessage( ret ), mbError, MB_OK );
	end

	{ Configure the Dealer 02 databases }
	strParam := '-param "ID=Dealer02" ' +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\autoedge02.db -ld autoedge -1 ' ) +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\oerpcore02.db -ld oerpcore -1 ' ) +
				strBase;

	DebugMsg( 'Running: ' + strCmd + ' ' + strParam );

	if not Exec( strCmd , strParam, ExpandConstant( '{app}' ), SW_HIDE, ewWaitUntilTerminated, ret ) then
	begin
		MsgBox( 'Data load failed: ' + SysErrorMessage( ret ), mbError, MB_OK );
	end

	{ Configure the HQ databases }
	strParam := '-param "ID=HQ" ' +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\autoedgehq.db -ld autoedge -1 ' ) +
				ExpandConstant( '-db {app}\autoedge-local\dealer\db\oerpcorehq.db -ld oerpcore -1 ' ) +
				strBase;

	DebugMsg( 'Running: ' + strCmd + ' ' + strParam );

	if not Exec( strCmd , strParam, ExpandConstant( '{app}' ), SW_HIDE, ewWaitUntilTerminated, ret ) then
	begin
		MsgBox( 'Data load failed: ' + SysErrorMessage( ret ), mbError, MB_OK );
	end
end;

{ === PROCEDURE RunSelectedTasks ======================================================== }
{ =																						= }
{ =		Procedure to run selected tasks													= }
{ =																						= }
{ ======================================================================================= }

procedure RunSelectedTasks;
begin
	if IsTaskSelected( 'populatedatabases' ) then
	begin
		PopulateDatabase();
	end;
end;

{ === PROCEDURE FixSourceFiles ========================================================== }
{ =																						= }
{ =		Installation Source Fixing Routine												= }
{ =																						= }
{ =		This procedure is used to fix some of the source problems related to paths,		= }
{ =		such as external procedure definitions and the likes.							= }
{ =																						= }
{ ======================================================================================= }

procedure FixSourceFiles;
var
	FileName	: string;
	FileBody	: string;
begin
	DebugMsg( 'Running FixSourceFiles()' );

	{ used to fix dll path for UUID here. Procedure stub left for future use }

end;

{ === PROCEDURE ConfigureInstallation =================================================== }
{ =																						= }
{ =		Installation Configuration Routine												= }
{ =																						= }
{ =		This procedure is used to create and configure all necessary control files,		= }
{ =		such as batch files, command files, Progress PF files and the likes. It is		= }
{ =		also used to copy files to the necessary places that cannot be handled by		= }
{ =		the InnoSetup utility itself.													= }
{ =																						= }
{ =		The Procedure uses the Configuration WizardPage to show working progress.		= }
{ =																						= }
{ ======================================================================================= }

procedure ConfigureInstallation;
begin
	DebugMsg( 'Running ConfigureInstallation()' );

	SetDLCDirectory();

	{ ======================================================================= }
	{ === *1* Copy databases, restore them and then run PROSTRCT REPAIR   === }
	{ ===     on the databases because of directory changes 			  === }
	{ ======================================================================= }

	if isComponentSelected( 'AETF_SERVER' ) then
	begin
		{ Restore the databases to normal structure }
		DoProRestore(ExpandConstant( '{app}\autoedgethefactory\server\db\aetf.db' ),
     					   ExpandConstant( '{app}\autoedgethefactory\server\db\autoedgethefactory.bup' ),
      					 ExpandConstant( '{app}\autoedgethefactory\server\db\' ));
	end;

	{ ======================================== }
	{ === *2* Updating Configuration Files === }
	{ ======================================== }

	DoUpdateConfigFiles;

	{ ============================================== }
	{ === *3* Updating Progress Properties Files === }
	{ ============================================== }
  DoUpdatePropertyFiles;
  FixSourceFiles;

	{ ============================== }
	{ === *4* Run Selected Tasks === }
	{ ============================== }

	RunSelectedTasks();

	{ ================ }
	{ === *5* Done === }
	{ ================ }

	DebugMsg( 'Done' );
end;

{ === PROCEDURE CurStepChanged ========================================================== }
{ =																						= }
{ =		Perform our own pre-install and post-install tasks.								= }
{ =																						= }
{ ======================================================================================= }

procedure CurStepChanged(CurStep: TSetupStep);
begin
	DebugMsg( 'CusrStepChanged()' );

  { Right after installing the files, we will modify them }
	if ( CurStep = ssPostInstall ) then
	begin
		// crHand.Show();
//		InstallServers();
		ConfigureInstallation();
		// crHand.Hide();
	end;

end;

{ === FUNCTION NextButtonClick ========================================================== }
{ =																						= }
{ =		'Next' Button Click Event Handler												= }
{ =																						= }
{ =		This function is called whenever the user clicks on the 'Next' button in the	= }
{ =		setup wizard. We will get the current page ID on which we can base our actions.	= }
{ =		The current page will be displayed as long as we do not return TRUE from this	= }
{ =		event handler. The moment we return TRUE, the next page in the sequence is		= }
{ =		displayed to the user.															= }
{ =																						= }
{ = 	NOTE: 	Validation routines for a page can be put into the include file (.inc)	= }
{ =				for that page on the nextbuttonclick event.								= }
{ =																						= }
{ ======================================================================================= }

function NextButtonClick( currentPage : integer ) : boolean;
begin
	DebugMsg( 'Next Clicked!' );

	{	If we are at the 'Ready to Install' page, we better make sure we have the	}
	{	correct DLC value so Inno can also use it to do [icons] and [ini] stuff!	}

	if ( currentpage = wpReady ) then
		SetDLCDirectory();

	{ The default is to go to the next page }
	Result := true;
end;

{ === FUNCTION BackButtonClick ========================================================== }
{ =																						= }
{ =		'Back' Button Click Event Handler												= }
{ =																						= }
{ =		This function is called whenever the user clicks on the 'Back' button in the	= }
{ =		setup wizard. We will get the current page ID on which we can base our actions.	= }
{ =		The current page will be displayed as long as we do not return TRUE from this	= }
{ =		event handler. The moment we return TRUE, the previous page in the sequence is	= }
{ =		displayed to the user.															= }
{ =																						= }
{ ======================================================================================= }

function BackButtonClick( currentPage : integer ) : boolean;
begin
	//	if bShowDebugMsg then
	//		MsgBox( 'Back Clicked!', mbInformation, MB_OK );
	Result := true;
end;

{ === PROCEDURE CurPageChanged ========================================================== }
{ =																						= }
{ =		Event procedure called after a new page is shown. The new page is identified	= }
{ =		by the CurPageID value.															= }
{ =																						= }
{ ======================================================================================= }

procedure CurPageChanged( CurPageID : Integer );
begin
	//	if bShowDebugMsg then
	//		MsgBox( 'Page : ' + IntToStr( CurPageID ), mbInformation, MB_OK );
end;

{ === FUNCTION ShouldSkipPage =========================================================== }
{ =																						= }
{ =		Event procedure called to check whether a page should be skipped or not.		= }
{ =																						= }
{ ======================================================================================= }

function ShouldSkipPage( PageID: Integer ) : Boolean;
begin
	Result := false;

	{ Skip AdminServer Port Page if SERVER component is not selected }
	if (( PageID = iAdminServerPortPageID ) and not isComponentSelected( 'AETF_SERVER' )) then
		Result := true;

	{ Skip Database Broker Ports Page if SERVER component is not selected }
	if (( PageID = iDBBrokerPortsPageID ) and not isComponentSelected( 'AETF_SERVER' )) then
		Result := true;

	{ Skip AppServer Broker Ports Page if SERVER component is not selected }
	if (( PageID = iASBrokerPortsPageID ) and not isComponentSelected( 'AETF_SERVER' )) then
		Result := true;

end;

{ === PROCEDURE UndoConfiguration ======================================================= }
{ =																						= }
{ =		Procedure to undo the changes made to the Progress Property files				= }
{ =																						= }
{ ======================================================================================= }

procedure UndoConfiguration;
var
	FileName 	: string;
	ret			: integer;
begin
	DebugMsg( 'Undoing changes made to Progress Property Files' );

	{ Undo database added to conmgr.properties }
	FileName := strDLCDirectory + '\properties\conmgr.properties';

	DeleteIniSection( '[database.dbautoedge]', FileName );
	DeleteIniSection( '[configuration.dbautoedge.defaultconfiguration]', FileName );
	DeleteIniSection( '[servergroup.dbautoedge.defaultconfiguration.defaultservergroup]]', FileName );

	DeleteIniSection( '[database.dboerpcore]', FileName );
	DeleteIniSection( '[configuration.dboerpcore.defaultconfiguration]', FileName );
	DeleteIniSection( '[servergroup.dboerpcore.defaultconfiguration.defaultservergroup]]', FileName );

	{ Undo the services added to ubroker.properties }
	FileName := strDLCDirectory + '\properties\ubroker.properties';
	DeleteIniSection( '[UBroker.WS.wsAutoEdge]', FileName );
	DeleteIniSection( '[UBroker.AS.asAutoEdge]', FileName );

end;

{ === FUNCTION InitializeUninstall ====================================================== }
{ =																						= }
{ =		Event procedure for initializing the uninstall wizard							= }
{ =																						= }
{ ======================================================================================= }

function InitializeUninstall() : boolean;
begin
	DebugMsg( 'Running InitializeUninstall()' );

	{	Removed for now since the change in DLC gathering. The only way to actually		}
	{	make this work is to store the selected OpenEdge Release and DLC Values in		}
	{	the registry so these can be picked up at this uninstall time and used.			}
	{	For now, this stuff will be disabled until such time we want this enabled		}
	{	and we have to implement the DLC value storage.									}

//	if setDLCDirectory() then
//	begin
//		{ Remove the entries created in the Progress Property Files }
//		UndoConfiguration;
//	end;

	Result := true;
end;

procedure SetLineEndToWindows();
var
	FileName, FileBody : string;
begin
	FileName := ExpandConstant( CurrentFileName() );

	if LoadStringFromFile( FileName, FileBody ) then
	begin
		StringChangeEx(FileBody, #10, #13#10, true);
		SaveStringToFile( FileName, FileBody, false );
	end;
end;

[InnoIDE_Settings]
LogFile=C:\devarea\projects\OEBP\installer\output\compile.log
LogFileOverwrite=true

